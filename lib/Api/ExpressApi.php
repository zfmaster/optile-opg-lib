<?php
/**
 * ExpressApi
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Optile\ApiException;
use Optile\Configuration;
use Optile\HeaderSelector;
use Optile\ObjectSerializer;

/**
 * ExpressApi Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExpressApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation confirmExpressPreset
     *
     * Confirm express preset session
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to confirm (required)
     * @param  \Optile\Model\ExpressPresetUpdate $preset_update Express preset update and confirmation details (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\ExpressPreset
     */
    public function confirmExpressPreset($preset_id, $preset_update)
    {
        list($response) = $this->confirmExpressPresetWithHttpInfo($preset_id, $preset_update);
        return $response;
    }

    /**
     * Operation confirmExpressPresetWithHttpInfo
     *
     * Confirm express preset session
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to confirm (required)
     * @param  \Optile\Model\ExpressPresetUpdate $preset_update Express preset update and confirmation details (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\ExpressPreset, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmExpressPresetWithHttpInfo($preset_id, $preset_update)
    {
        $returnType = '\Optile\Model\ExpressPreset';
        $request = $this->confirmExpressPresetRequest($preset_id, $preset_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ExpressPreset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmExpressPresetAsync
     *
     * Confirm express preset session
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to confirm (required)
     * @param  \Optile\Model\ExpressPresetUpdate $preset_update Express preset update and confirmation details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmExpressPresetAsync($preset_id, $preset_update)
    {
        return $this->confirmExpressPresetAsyncWithHttpInfo($preset_id, $preset_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmExpressPresetAsyncWithHttpInfo
     *
     * Confirm express preset session
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to confirm (required)
     * @param  \Optile\Model\ExpressPresetUpdate $preset_update Express preset update and confirmation details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmExpressPresetAsyncWithHttpInfo($preset_id, $preset_update)
    {
        $returnType = '\Optile\Model\ExpressPreset';
        $request = $this->confirmExpressPresetRequest($preset_id, $preset_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmExpressPreset'
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to confirm (required)
     * @param  \Optile\Model\ExpressPresetUpdate $preset_update Express preset update and confirmation details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confirmExpressPresetRequest($preset_id, $preset_update)
    {
        // verify the required parameter 'preset_id' is set
        if ($preset_id === null || (is_array($preset_id) && count($preset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $preset_id when calling confirmExpressPreset'
            );
        }
        // verify the required parameter 'preset_update' is set
        if ($preset_update === null || (is_array($preset_update) && count($preset_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $preset_update when calling confirmExpressPreset'
            );
        }

        $resourcePath = '/presets/{presetId}/confirm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($preset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'presetId' . '}',
                ObjectSerializer::toPathValue($preset_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($preset_update)) {
            $_tempBody = $preset_update;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createExpressPreset
     *
     * Create express preset session
     *
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\ExpressTransaction $transaction Express preset transaction details (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\ExpressPreset
     */
    public function createExpressPreset($network, $transaction)
    {
        list($response) = $this->createExpressPresetWithHttpInfo($network, $transaction);
        return $response;
    }

    /**
     * Operation createExpressPresetWithHttpInfo
     *
     * Create express preset session
     *
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\ExpressTransaction $transaction Express preset transaction details (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\ExpressPreset, HTTP status code, HTTP response headers (array of strings)
     */
    public function createExpressPresetWithHttpInfo($network, $transaction)
    {
        $returnType = '\Optile\Model\ExpressPreset';
        $request = $this->createExpressPresetRequest($network, $transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ExpressPreset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createExpressPresetAsync
     *
     * Create express preset session
     *
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\ExpressTransaction $transaction Express preset transaction details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createExpressPresetAsync($network, $transaction)
    {
        return $this->createExpressPresetAsyncWithHttpInfo($network, $transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createExpressPresetAsyncWithHttpInfo
     *
     * Create express preset session
     *
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\ExpressTransaction $transaction Express preset transaction details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createExpressPresetAsyncWithHttpInfo($network, $transaction)
    {
        $returnType = '\Optile\Model\ExpressPreset';
        $request = $this->createExpressPresetRequest($network, $transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createExpressPreset'
     *
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\ExpressTransaction $transaction Express preset transaction details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createExpressPresetRequest($network, $transaction)
    {
        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling createExpressPreset'
            );
        }
        // verify the required parameter 'transaction' is set
        if ($transaction === null || (is_array($transaction) && count($transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction when calling createExpressPreset'
            );
        }

        $resourcePath = '/express/{network}/preset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($transaction)) {
            $_tempBody = $transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExpressList
     *
     * Get express checkout networks
     *
     * @param  string $country Country code of the payment in ISO 3166-1 (alpha-2) format, e.g \&quot;DE\&quot;, \&quot;FR\&quot;, \&quot;US\&quot;, \&quot;GB\&quot;, etc. (required)
     * @param  string $division Merchant division of the payment. There is always one default division that will be used if this property is undefined. Different divisions can be configured with different setup, contracts, payment routes and network options. (optional)
     * @param  string $integration Defines integration scenario of the payment, default is &#x60;DISPLAY_NATIVE&#x60;. Selected scenario has an impact on operation URLs within response, they will be adjusted for selected integration scenario. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\ExpressList
     */
    public function getExpressList($country, $division = null, $integration = null)
    {
        list($response) = $this->getExpressListWithHttpInfo($country, $division, $integration);
        return $response;
    }

    /**
     * Operation getExpressListWithHttpInfo
     *
     * Get express checkout networks
     *
     * @param  string $country Country code of the payment in ISO 3166-1 (alpha-2) format, e.g \&quot;DE\&quot;, \&quot;FR\&quot;, \&quot;US\&quot;, \&quot;GB\&quot;, etc. (required)
     * @param  string $division Merchant division of the payment. There is always one default division that will be used if this property is undefined. Different divisions can be configured with different setup, contracts, payment routes and network options. (optional)
     * @param  string $integration Defines integration scenario of the payment, default is &#x60;DISPLAY_NATIVE&#x60;. Selected scenario has an impact on operation URLs within response, they will be adjusted for selected integration scenario. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\ExpressList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExpressListWithHttpInfo($country, $division = null, $integration = null)
    {
        $returnType = '\Optile\Model\ExpressList';
        $request = $this->getExpressListRequest($country, $division, $integration);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ExpressList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExpressListAsync
     *
     * Get express checkout networks
     *
     * @param  string $country Country code of the payment in ISO 3166-1 (alpha-2) format, e.g \&quot;DE\&quot;, \&quot;FR\&quot;, \&quot;US\&quot;, \&quot;GB\&quot;, etc. (required)
     * @param  string $division Merchant division of the payment. There is always one default division that will be used if this property is undefined. Different divisions can be configured with different setup, contracts, payment routes and network options. (optional)
     * @param  string $integration Defines integration scenario of the payment, default is &#x60;DISPLAY_NATIVE&#x60;. Selected scenario has an impact on operation URLs within response, they will be adjusted for selected integration scenario. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpressListAsync($country, $division = null, $integration = null)
    {
        return $this->getExpressListAsyncWithHttpInfo($country, $division, $integration)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExpressListAsyncWithHttpInfo
     *
     * Get express checkout networks
     *
     * @param  string $country Country code of the payment in ISO 3166-1 (alpha-2) format, e.g \&quot;DE\&quot;, \&quot;FR\&quot;, \&quot;US\&quot;, \&quot;GB\&quot;, etc. (required)
     * @param  string $division Merchant division of the payment. There is always one default division that will be used if this property is undefined. Different divisions can be configured with different setup, contracts, payment routes and network options. (optional)
     * @param  string $integration Defines integration scenario of the payment, default is &#x60;DISPLAY_NATIVE&#x60;. Selected scenario has an impact on operation URLs within response, they will be adjusted for selected integration scenario. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpressListAsyncWithHttpInfo($country, $division = null, $integration = null)
    {
        $returnType = '\Optile\Model\ExpressList';
        $request = $this->getExpressListRequest($country, $division, $integration);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExpressList'
     *
     * @param  string $country Country code of the payment in ISO 3166-1 (alpha-2) format, e.g \&quot;DE\&quot;, \&quot;FR\&quot;, \&quot;US\&quot;, \&quot;GB\&quot;, etc. (required)
     * @param  string $division Merchant division of the payment. There is always one default division that will be used if this property is undefined. Different divisions can be configured with different setup, contracts, payment routes and network options. (optional)
     * @param  string $integration Defines integration scenario of the payment, default is &#x60;DISPLAY_NATIVE&#x60;. Selected scenario has an impact on operation URLs within response, they will be adjusted for selected integration scenario. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExpressListRequest($country, $division = null, $integration = null)
    {
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling getExpressList'
            );
        }

        $resourcePath = '/express';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($division !== null) {
            $queryParams['division'] = ObjectSerializer::toQueryValue($division);
        }
        // query params
        if ($integration !== null) {
            $queryParams['integration'] = ObjectSerializer::toQueryValue($integration);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExpressPreset
     *
     * Get express preset details
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to retrieve (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\ExpressPreset
     */
    public function getExpressPreset($preset_id)
    {
        list($response) = $this->getExpressPresetWithHttpInfo($preset_id);
        return $response;
    }

    /**
     * Operation getExpressPresetWithHttpInfo
     *
     * Get express preset details
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to retrieve (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\ExpressPreset, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExpressPresetWithHttpInfo($preset_id)
    {
        $returnType = '\Optile\Model\ExpressPreset';
        $request = $this->getExpressPresetRequest($preset_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ExpressPreset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExpressPresetAsync
     *
     * Get express preset details
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpressPresetAsync($preset_id)
    {
        return $this->getExpressPresetAsyncWithHttpInfo($preset_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExpressPresetAsyncWithHttpInfo
     *
     * Get express preset details
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpressPresetAsyncWithHttpInfo($preset_id)
    {
        $returnType = '\Optile\Model\ExpressPreset';
        $request = $this->getExpressPresetRequest($preset_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExpressPreset'
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExpressPresetRequest($preset_id)
    {
        // verify the required parameter 'preset_id' is set
        if ($preset_id === null || (is_array($preset_id) && count($preset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $preset_id when calling getExpressPreset'
            );
        }

        $resourcePath = '/presets/{presetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($preset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'presetId' . '}',
                ObjectSerializer::toPathValue($preset_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExpressPreset
     *
     * Update express preset session
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to update (required)
     * @param  \Optile\Model\ExpressPresetUpdate $preset_update Express preset update details (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\ExpressPreset
     */
    public function updateExpressPreset($preset_id, $preset_update)
    {
        list($response) = $this->updateExpressPresetWithHttpInfo($preset_id, $preset_update);
        return $response;
    }

    /**
     * Operation updateExpressPresetWithHttpInfo
     *
     * Update express preset session
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to update (required)
     * @param  \Optile\Model\ExpressPresetUpdate $preset_update Express preset update details (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\ExpressPreset, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExpressPresetWithHttpInfo($preset_id, $preset_update)
    {
        $returnType = '\Optile\Model\ExpressPreset';
        $request = $this->updateExpressPresetRequest($preset_id, $preset_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ExpressPreset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExpressPresetAsync
     *
     * Update express preset session
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to update (required)
     * @param  \Optile\Model\ExpressPresetUpdate $preset_update Express preset update details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExpressPresetAsync($preset_id, $preset_update)
    {
        return $this->updateExpressPresetAsyncWithHttpInfo($preset_id, $preset_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExpressPresetAsyncWithHttpInfo
     *
     * Update express preset session
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to update (required)
     * @param  \Optile\Model\ExpressPresetUpdate $preset_update Express preset update details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExpressPresetAsyncWithHttpInfo($preset_id, $preset_update)
    {
        $returnType = '\Optile\Model\ExpressPreset';
        $request = $this->updateExpressPresetRequest($preset_id, $preset_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExpressPreset'
     *
     * @param  string $preset_id The &#x60;longId&#x60; of an &#x60;EXPRESSPRESET&#x60; session to update (required)
     * @param  \Optile\Model\ExpressPresetUpdate $preset_update Express preset update details (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateExpressPresetRequest($preset_id, $preset_update)
    {
        // verify the required parameter 'preset_id' is set
        if ($preset_id === null || (is_array($preset_id) && count($preset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $preset_id when calling updateExpressPreset'
            );
        }
        // verify the required parameter 'preset_update' is set
        if ($preset_update === null || (is_array($preset_update) && count($preset_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $preset_update when calling updateExpressPreset'
            );
        }

        $resourcePath = '/presets/{presetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($preset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'presetId' . '}',
                ObjectSerializer::toPathValue($preset_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($preset_update)) {
            $_tempBody = $preset_update;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
