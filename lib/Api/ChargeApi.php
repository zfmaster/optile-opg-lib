<?php
/**
 * ChargeApi
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Optile\ApiException;
use Optile\Configuration;
use Optile\HeaderSelector;
use Optile\ObjectSerializer;

/**
 * ChargeApi Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChargeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelCharge
     *
     * Cancel deferred CHARGE
     *
     * @param  string $charge_id The &#x60;longId&#x60; of a deferred &#x60;CHARGE&#x60; operation to cancel (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelCharge($charge_id)
    {
        $this->cancelChargeWithHttpInfo($charge_id);
    }

    /**
     * Operation cancelChargeWithHttpInfo
     *
     * Cancel deferred CHARGE
     *
     * @param  string $charge_id The &#x60;longId&#x60; of a deferred &#x60;CHARGE&#x60; operation to cancel (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelChargeWithHttpInfo($charge_id)
    {
        $returnType = '';
        $request = $this->cancelChargeRequest($charge_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelChargeAsync
     *
     * Cancel deferred CHARGE
     *
     * @param  string $charge_id The &#x60;longId&#x60; of a deferred &#x60;CHARGE&#x60; operation to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelChargeAsync($charge_id)
    {
        return $this->cancelChargeAsyncWithHttpInfo($charge_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelChargeAsyncWithHttpInfo
     *
     * Cancel deferred CHARGE
     *
     * @param  string $charge_id The &#x60;longId&#x60; of a deferred &#x60;CHARGE&#x60; operation to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelChargeAsyncWithHttpInfo($charge_id)
    {
        $returnType = '';
        $request = $this->cancelChargeRequest($charge_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelCharge'
     *
     * @param  string $charge_id The &#x60;longId&#x60; of a deferred &#x60;CHARGE&#x60; operation to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelChargeRequest($charge_id)
    {
        // verify the required parameter 'charge_id' is set
        if ($charge_id === null || (is_array($charge_id) && count($charge_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $charge_id when calling cancelCharge'
            );
        }

        $resourcePath = '/charges/{chargeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($charge_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chargeId' . '}',
                ObjectSerializer::toPathValue($charge_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharge
     *
     * Get CHARGE operation details
     *
     * @param  string $charge_id The &#x60;longId&#x60; of a &#x60;CHARGE&#x60; operation to retrieve (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\Charge
     */
    public function getCharge($charge_id)
    {
        list($response) = $this->getChargeWithHttpInfo($charge_id);
        return $response;
    }

    /**
     * Operation getChargeWithHttpInfo
     *
     * Get CHARGE operation details
     *
     * @param  string $charge_id The &#x60;longId&#x60; of a &#x60;CHARGE&#x60; operation to retrieve (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\Charge, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChargeWithHttpInfo($charge_id)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->getChargeRequest($charge_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\Charge',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChargeAsync
     *
     * Get CHARGE operation details
     *
     * @param  string $charge_id The &#x60;longId&#x60; of a &#x60;CHARGE&#x60; operation to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChargeAsync($charge_id)
    {
        return $this->getChargeAsyncWithHttpInfo($charge_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChargeAsyncWithHttpInfo
     *
     * Get CHARGE operation details
     *
     * @param  string $charge_id The &#x60;longId&#x60; of a &#x60;CHARGE&#x60; operation to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChargeAsyncWithHttpInfo($charge_id)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->getChargeRequest($charge_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharge'
     *
     * @param  string $charge_id The &#x60;longId&#x60; of a &#x60;CHARGE&#x60; operation to retrieve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getChargeRequest($charge_id)
    {
        // verify the required parameter 'charge_id' is set
        if ($charge_id === null || (is_array($charge_id) && count($charge_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $charge_id when calling getCharge'
            );
        }

        $resourcePath = '/charges/{chargeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($charge_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chargeId' . '}',
                ObjectSerializer::toPathValue($charge_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payWithCustomerPaymentAccount
     *
     * Recurring CHARGE of registered customer
     *
     * @param  string $customer_id The ID of a customer registered at optile (required)
     * @param  \Optile\Model\RecurringTransaction $transaction Holds transaction information for recurring &#x60;CHARGE&#x60; operation (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\Charge
     */
    public function payWithCustomerPaymentAccount($customer_id, $transaction)
    {
        list($response) = $this->payWithCustomerPaymentAccountWithHttpInfo($customer_id, $transaction);
        return $response;
    }

    /**
     * Operation payWithCustomerPaymentAccountWithHttpInfo
     *
     * Recurring CHARGE of registered customer
     *
     * @param  string $customer_id The ID of a customer registered at optile (required)
     * @param  \Optile\Model\RecurringTransaction $transaction Holds transaction information for recurring &#x60;CHARGE&#x60; operation (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\Charge, HTTP status code, HTTP response headers (array of strings)
     */
    public function payWithCustomerPaymentAccountWithHttpInfo($customer_id, $transaction)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->payWithCustomerPaymentAccountRequest($customer_id, $transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\Charge',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payWithCustomerPaymentAccountAsync
     *
     * Recurring CHARGE of registered customer
     *
     * @param  string $customer_id The ID of a customer registered at optile (required)
     * @param  \Optile\Model\RecurringTransaction $transaction Holds transaction information for recurring &#x60;CHARGE&#x60; operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payWithCustomerPaymentAccountAsync($customer_id, $transaction)
    {
        return $this->payWithCustomerPaymentAccountAsyncWithHttpInfo($customer_id, $transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payWithCustomerPaymentAccountAsyncWithHttpInfo
     *
     * Recurring CHARGE of registered customer
     *
     * @param  string $customer_id The ID of a customer registered at optile (required)
     * @param  \Optile\Model\RecurringTransaction $transaction Holds transaction information for recurring &#x60;CHARGE&#x60; operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payWithCustomerPaymentAccountAsyncWithHttpInfo($customer_id, $transaction)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->payWithCustomerPaymentAccountRequest($customer_id, $transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payWithCustomerPaymentAccount'
     *
     * @param  string $customer_id The ID of a customer registered at optile (required)
     * @param  \Optile\Model\RecurringTransaction $transaction Holds transaction information for recurring &#x60;CHARGE&#x60; operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payWithCustomerPaymentAccountRequest($customer_id, $transaction)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling payWithCustomerPaymentAccount'
            );
        }
        // verify the required parameter 'transaction' is set
        if ($transaction === null || (is_array($transaction) && count($transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction when calling payWithCustomerPaymentAccount'
            );
        }

        $resourcePath = '/customers/{customerId}/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($transaction)) {
            $_tempBody = $transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payWithExpressPreset
     *
     * Pay with confirmed express preset
     *
     * @param  string $preset_id The &#x60;longId&#x60; of a confirmed &#x60;EXPRESSPRESET&#x60; session to pay with (required)
     * @param  \Optile\Model\ExpressOperation $operation Holds information for &#x60;CHARGE&#x60; operation, empty content for a common use case (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\Charge
     */
    public function payWithExpressPreset($preset_id, $operation)
    {
        list($response) = $this->payWithExpressPresetWithHttpInfo($preset_id, $operation);
        return $response;
    }

    /**
     * Operation payWithExpressPresetWithHttpInfo
     *
     * Pay with confirmed express preset
     *
     * @param  string $preset_id The &#x60;longId&#x60; of a confirmed &#x60;EXPRESSPRESET&#x60; session to pay with (required)
     * @param  \Optile\Model\ExpressOperation $operation Holds information for &#x60;CHARGE&#x60; operation, empty content for a common use case (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\Charge, HTTP status code, HTTP response headers (array of strings)
     */
    public function payWithExpressPresetWithHttpInfo($preset_id, $operation)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->payWithExpressPresetRequest($preset_id, $operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\Charge',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payWithExpressPresetAsync
     *
     * Pay with confirmed express preset
     *
     * @param  string $preset_id The &#x60;longId&#x60; of a confirmed &#x60;EXPRESSPRESET&#x60; session to pay with (required)
     * @param  \Optile\Model\ExpressOperation $operation Holds information for &#x60;CHARGE&#x60; operation, empty content for a common use case (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payWithExpressPresetAsync($preset_id, $operation)
    {
        return $this->payWithExpressPresetAsyncWithHttpInfo($preset_id, $operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payWithExpressPresetAsyncWithHttpInfo
     *
     * Pay with confirmed express preset
     *
     * @param  string $preset_id The &#x60;longId&#x60; of a confirmed &#x60;EXPRESSPRESET&#x60; session to pay with (required)
     * @param  \Optile\Model\ExpressOperation $operation Holds information for &#x60;CHARGE&#x60; operation, empty content for a common use case (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payWithExpressPresetAsyncWithHttpInfo($preset_id, $operation)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->payWithExpressPresetRequest($preset_id, $operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payWithExpressPreset'
     *
     * @param  string $preset_id The &#x60;longId&#x60; of a confirmed &#x60;EXPRESSPRESET&#x60; session to pay with (required)
     * @param  \Optile\Model\ExpressOperation $operation Holds information for &#x60;CHARGE&#x60; operation, empty content for a common use case (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payWithExpressPresetRequest($preset_id, $operation)
    {
        // verify the required parameter 'preset_id' is set
        if ($preset_id === null || (is_array($preset_id) && count($preset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $preset_id when calling payWithExpressPreset'
            );
        }
        // verify the required parameter 'operation' is set
        if ($operation === null || (is_array($operation) && count($operation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operation when calling payWithExpressPreset'
            );
        }

        $resourcePath = '/presets/{presetId}/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($preset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'presetId' . '}',
                ObjectSerializer::toPathValue($preset_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($operation)) {
            $_tempBody = $operation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payWithPaymentAccount
     *
     * Pay with selected registered account
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  string $account_id The ID of account from registered customer to perform a &#x60;CHARGE&#x60; operation (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with selected registered account (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\Charge
     */
    public function payWithPaymentAccount($list_id, $account_id, $operation)
    {
        list($response) = $this->payWithPaymentAccountWithHttpInfo($list_id, $account_id, $operation);
        return $response;
    }

    /**
     * Operation payWithPaymentAccountWithHttpInfo
     *
     * Pay with selected registered account
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  string $account_id The ID of account from registered customer to perform a &#x60;CHARGE&#x60; operation (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with selected registered account (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\Charge, HTTP status code, HTTP response headers (array of strings)
     */
    public function payWithPaymentAccountWithHttpInfo($list_id, $account_id, $operation)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->payWithPaymentAccountRequest($list_id, $account_id, $operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\Charge',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payWithPaymentAccountAsync
     *
     * Pay with selected registered account
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  string $account_id The ID of account from registered customer to perform a &#x60;CHARGE&#x60; operation (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with selected registered account (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payWithPaymentAccountAsync($list_id, $account_id, $operation)
    {
        return $this->payWithPaymentAccountAsyncWithHttpInfo($list_id, $account_id, $operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payWithPaymentAccountAsyncWithHttpInfo
     *
     * Pay with selected registered account
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  string $account_id The ID of account from registered customer to perform a &#x60;CHARGE&#x60; operation (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with selected registered account (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payWithPaymentAccountAsyncWithHttpInfo($list_id, $account_id, $operation)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->payWithPaymentAccountRequest($list_id, $account_id, $operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payWithPaymentAccount'
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  string $account_id The ID of account from registered customer to perform a &#x60;CHARGE&#x60; operation (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with selected registered account (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payWithPaymentAccountRequest($list_id, $account_id, $operation)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling payWithPaymentAccount'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling payWithPaymentAccount'
            );
        }
        // verify the required parameter 'operation' is set
        if ($operation === null || (is_array($operation) && count($operation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operation when calling payWithPaymentAccount'
            );
        }

        $resourcePath = '/lists/{listId}/accounts/{accountId}/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($operation)) {
            $_tempBody = $operation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payWithPaymentNetwork
     *
     * Pay with selected payment network
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with selected payment network (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\Charge
     */
    public function payWithPaymentNetwork($list_id, $network, $operation)
    {
        list($response) = $this->payWithPaymentNetworkWithHttpInfo($list_id, $network, $operation);
        return $response;
    }

    /**
     * Operation payWithPaymentNetworkWithHttpInfo
     *
     * Pay with selected payment network
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with selected payment network (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\Charge, HTTP status code, HTTP response headers (array of strings)
     */
    public function payWithPaymentNetworkWithHttpInfo($list_id, $network, $operation)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->payWithPaymentNetworkRequest($list_id, $network, $operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\Charge',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payWithPaymentNetworkAsync
     *
     * Pay with selected payment network
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with selected payment network (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payWithPaymentNetworkAsync($list_id, $network, $operation)
    {
        return $this->payWithPaymentNetworkAsyncWithHttpInfo($list_id, $network, $operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payWithPaymentNetworkAsyncWithHttpInfo
     *
     * Pay with selected payment network
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with selected payment network (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payWithPaymentNetworkAsyncWithHttpInfo($list_id, $network, $operation)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->payWithPaymentNetworkRequest($list_id, $network, $operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payWithPaymentNetwork'
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with selected payment network (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payWithPaymentNetworkRequest($list_id, $network, $operation)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling payWithPaymentNetwork'
            );
        }
        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling payWithPaymentNetwork'
            );
        }
        // verify the required parameter 'operation' is set
        if ($operation === null || (is_array($operation) && count($operation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operation when calling payWithPaymentNetwork'
            );
        }

        $resourcePath = '/lists/{listId}/{network}/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($operation)) {
            $_tempBody = $operation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payWithSelectedPaymentNetwork
     *
     * Pay with preset network or account
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with preset payment network (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\Charge
     */
    public function payWithSelectedPaymentNetwork($list_id, $operation)
    {
        list($response) = $this->payWithSelectedPaymentNetworkWithHttpInfo($list_id, $operation);
        return $response;
    }

    /**
     * Operation payWithSelectedPaymentNetworkWithHttpInfo
     *
     * Pay with preset network or account
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with preset payment network (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\Charge, HTTP status code, HTTP response headers (array of strings)
     */
    public function payWithSelectedPaymentNetworkWithHttpInfo($list_id, $operation)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->payWithSelectedPaymentNetworkRequest($list_id, $operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\Charge',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payWithSelectedPaymentNetworkAsync
     *
     * Pay with preset network or account
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with preset payment network (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payWithSelectedPaymentNetworkAsync($list_id, $operation)
    {
        return $this->payWithSelectedPaymentNetworkAsyncWithHttpInfo($list_id, $operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payWithSelectedPaymentNetworkAsyncWithHttpInfo
     *
     * Pay with preset network or account
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with preset payment network (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payWithSelectedPaymentNetworkAsyncWithHttpInfo($list_id, $operation)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->payWithSelectedPaymentNetworkRequest($list_id, $operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payWithSelectedPaymentNetwork'
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to complete a &#x60;CHARGE&#x60; operation (required)
     * @param  \Optile\Model\Operation $operation Holds information for &#x60;CHARGE&#x60; operation with preset payment network (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payWithSelectedPaymentNetworkRequest($list_id, $operation)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling payWithSelectedPaymentNetwork'
            );
        }
        // verify the required parameter 'operation' is set
        if ($operation === null || (is_array($operation) && count($operation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operation when calling payWithSelectedPaymentNetwork'
            );
        }

        $resourcePath = '/lists/{listId}/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($operation)) {
            $_tempBody = $operation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation standalonePayment
     *
     * Stand-alone payment with selected payment network
     *
     * @param  \Optile\Model\StandaloneTransaction $transaction Holds transaction information for stand-alone &#x60;CHARGE&#x60; operation (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\Charge
     */
    public function standalonePayment($transaction)
    {
        list($response) = $this->standalonePaymentWithHttpInfo($transaction);
        return $response;
    }

    /**
     * Operation standalonePaymentWithHttpInfo
     *
     * Stand-alone payment with selected payment network
     *
     * @param  \Optile\Model\StandaloneTransaction $transaction Holds transaction information for stand-alone &#x60;CHARGE&#x60; operation (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\Charge, HTTP status code, HTTP response headers (array of strings)
     */
    public function standalonePaymentWithHttpInfo($transaction)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->standalonePaymentRequest($transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\Charge',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation standalonePaymentAsync
     *
     * Stand-alone payment with selected payment network
     *
     * @param  \Optile\Model\StandaloneTransaction $transaction Holds transaction information for stand-alone &#x60;CHARGE&#x60; operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function standalonePaymentAsync($transaction)
    {
        return $this->standalonePaymentAsyncWithHttpInfo($transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation standalonePaymentAsyncWithHttpInfo
     *
     * Stand-alone payment with selected payment network
     *
     * @param  \Optile\Model\StandaloneTransaction $transaction Holds transaction information for stand-alone &#x60;CHARGE&#x60; operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function standalonePaymentAsyncWithHttpInfo($transaction)
    {
        $returnType = '\Optile\Model\Charge';
        $request = $this->standalonePaymentRequest($transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'standalonePayment'
     *
     * @param  \Optile\Model\StandaloneTransaction $transaction Holds transaction information for stand-alone &#x60;CHARGE&#x60; operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function standalonePaymentRequest($transaction)
    {
        // verify the required parameter 'transaction' is set
        if ($transaction === null || (is_array($transaction) && count($transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction when calling standalonePayment'
            );
        }

        $resourcePath = '/charges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($transaction)) {
            $_tempBody = $transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
