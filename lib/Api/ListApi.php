<?php
/**
 * ListApi
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Optile\ApiException;
use Optile\Configuration;
use Optile\HeaderSelector;
use Optile\ObjectSerializer;

/**
 * ListApi Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelPaymentSession
     *
     * Cancel LIST session
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to cancel (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelPaymentSession($list_id)
    {
        $this->cancelPaymentSessionWithHttpInfo($list_id);
    }

    /**
     * Operation cancelPaymentSessionWithHttpInfo
     *
     * Cancel LIST session
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to cancel (required)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPaymentSessionWithHttpInfo($list_id)
    {
        $returnType = '';
        $request = $this->cancelPaymentSessionRequest($list_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPaymentSessionAsync
     *
     * Cancel LIST session
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentSessionAsync($list_id)
    {
        return $this->cancelPaymentSessionAsyncWithHttpInfo($list_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPaymentSessionAsyncWithHttpInfo
     *
     * Cancel LIST session
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentSessionAsyncWithHttpInfo($list_id)
    {
        $returnType = '';
        $request = $this->cancelPaymentSessionRequest($list_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPaymentSession'
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelPaymentSessionRequest($list_id)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling cancelPaymentSession'
            );
        }

        $resourcePath = '/lists/{listId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentSession
     *
     * Create new payment session
     *
     * @param  \Optile\Model\Transaction $transaction Transaction to initialize payment session (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\NetworkList
     */
    public function createPaymentSession($transaction, $view = null)
    {
        list($response) = $this->createPaymentSessionWithHttpInfo($transaction, $view);
        return $response;
    }

    /**
     * Operation createPaymentSessionWithHttpInfo
     *
     * Create new payment session
     *
     * @param  \Optile\Model\Transaction $transaction Transaction to initialize payment session (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\NetworkList, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentSessionWithHttpInfo($transaction, $view = null)
    {
        $returnType = '\Optile\Model\NetworkList';
        $request = $this->createPaymentSessionRequest($transaction, $view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\NetworkList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentSessionAsync
     *
     * Create new payment session
     *
     * @param  \Optile\Model\Transaction $transaction Transaction to initialize payment session (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentSessionAsync($transaction, $view = null)
    {
        return $this->createPaymentSessionAsyncWithHttpInfo($transaction, $view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentSessionAsyncWithHttpInfo
     *
     * Create new payment session
     *
     * @param  \Optile\Model\Transaction $transaction Transaction to initialize payment session (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentSessionAsyncWithHttpInfo($transaction, $view = null)
    {
        $returnType = '\Optile\Model\NetworkList';
        $request = $this->createPaymentSessionRequest($transaction, $view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentSession'
     *
     * @param  \Optile\Model\Transaction $transaction Transaction to initialize payment session (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPaymentSessionRequest($transaction, $view = null)
    {
        // verify the required parameter 'transaction' is set
        if ($transaction === null || (is_array($transaction) && count($transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction when calling createPaymentSession'
            );
        }

        $resourcePath = '/lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($view)) {
            $view = ObjectSerializer::serializeCollection($view, 'csv', true);
        }
        if ($view !== null) {
            $queryParams['view'] = ObjectSerializer::toQueryValue($view);
        }


        // body params
        $_tempBody = null;
        if (isset($transaction)) {
            $_tempBody = $transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentAccount
     *
     * Get registered account of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $account_id The ID of account from registered customer (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\AccountRegistration
     */
    public function getPaymentAccount($list_id, $account_id, $view = null)
    {
        list($response) = $this->getPaymentAccountWithHttpInfo($list_id, $account_id, $view);
        return $response;
    }

    /**
     * Operation getPaymentAccountWithHttpInfo
     *
     * Get registered account of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $account_id The ID of account from registered customer (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\AccountRegistration, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentAccountWithHttpInfo($list_id, $account_id, $view = null)
    {
        $returnType = '\Optile\Model\AccountRegistration';
        $request = $this->getPaymentAccountRequest($list_id, $account_id, $view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\AccountRegistration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentAccountAsync
     *
     * Get registered account of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $account_id The ID of account from registered customer (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAccountAsync($list_id, $account_id, $view = null)
    {
        return $this->getPaymentAccountAsyncWithHttpInfo($list_id, $account_id, $view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentAccountAsyncWithHttpInfo
     *
     * Get registered account of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $account_id The ID of account from registered customer (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAccountAsyncWithHttpInfo($list_id, $account_id, $view = null)
    {
        $returnType = '\Optile\Model\AccountRegistration';
        $request = $this->getPaymentAccountRequest($list_id, $account_id, $view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentAccount'
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $account_id The ID of account from registered customer (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentAccountRequest($list_id, $account_id, $view = null)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling getPaymentAccount'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getPaymentAccount'
            );
        }

        $resourcePath = '/lists/{listId}/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($view)) {
            $view = ObjectSerializer::serializeCollection($view, 'csv', true);
        }
        if ($view !== null) {
            $queryParams['view'] = ObjectSerializer::toQueryValue($view);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentNetwork
     *
     * Get payment network of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $network Network code of network to retrieve (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\ApplicableNetwork
     */
    public function getPaymentNetwork($list_id, $network, $view = null)
    {
        list($response) = $this->getPaymentNetworkWithHttpInfo($list_id, $network, $view);
        return $response;
    }

    /**
     * Operation getPaymentNetworkWithHttpInfo
     *
     * Get payment network of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $network Network code of network to retrieve (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\ApplicableNetwork, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentNetworkWithHttpInfo($list_id, $network, $view = null)
    {
        $returnType = '\Optile\Model\ApplicableNetwork';
        $request = $this->getPaymentNetworkRequest($list_id, $network, $view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ApplicableNetwork',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentNetworkAsync
     *
     * Get payment network of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $network Network code of network to retrieve (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentNetworkAsync($list_id, $network, $view = null)
    {
        return $this->getPaymentNetworkAsyncWithHttpInfo($list_id, $network, $view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentNetworkAsyncWithHttpInfo
     *
     * Get payment network of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $network Network code of network to retrieve (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentNetworkAsyncWithHttpInfo($list_id, $network, $view = null)
    {
        $returnType = '\Optile\Model\ApplicableNetwork';
        $request = $this->getPaymentNetworkRequest($list_id, $network, $view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentNetwork'
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $network Network code of network to retrieve (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentNetworkRequest($list_id, $network, $view = null)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling getPaymentNetwork'
            );
        }
        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getPaymentNetwork'
            );
        }

        $resourcePath = '/lists/{listId}/{network}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($view)) {
            $view = ObjectSerializer::serializeCollection($view, 'csv', true);
        }
        if ($view !== null) {
            $queryParams['view'] = ObjectSerializer::toQueryValue($view);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentSession
     *
     * Get LIST session details
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to retrieve (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options. Supplying unknown options or conflicting options combination (e.g. \&quot;-jsonForms,jsonForms\&quot;) will cause an error and HTTP 400 (Bad Request) response.  Following options are supported:   * &#x60;htmlForms&#x60; - this option enables generation of links to build HTML forms for applicable networks and registered     accounts in &#x60;LIST&#x60; response. **Enabled** by default.   * &#x60;jsonForms&#x60; - this option enables generation of structured (in JSON format) description of forms for applicable     networks and registered accounts in &#x60;LIST&#x60; response. **Disabled** by default.   * &#x60;routes&#x60; - this option enables routing configuration to be exposed for applicable networks and registered accounts     in &#x60;LIST&#x60; response. **Disabled** by default.  Note: if no value supplied for an option the API behaves according to the defaults. Empty &#x60;view&#x60; parameter is interpreted as **\&quot;htmlForms,-jsonForms,-routes\&quot;** (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\NetworkList
     */
    public function getPaymentSession($list_id, $view = null)
    {
        list($response) = $this->getPaymentSessionWithHttpInfo($list_id, $view);
        return $response;
    }

    /**
     * Operation getPaymentSessionWithHttpInfo
     *
     * Get LIST session details
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to retrieve (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options. Supplying unknown options or conflicting options combination (e.g. \&quot;-jsonForms,jsonForms\&quot;) will cause an error and HTTP 400 (Bad Request) response.  Following options are supported:   * &#x60;htmlForms&#x60; - this option enables generation of links to build HTML forms for applicable networks and registered     accounts in &#x60;LIST&#x60; response. **Enabled** by default.   * &#x60;jsonForms&#x60; - this option enables generation of structured (in JSON format) description of forms for applicable     networks and registered accounts in &#x60;LIST&#x60; response. **Disabled** by default.   * &#x60;routes&#x60; - this option enables routing configuration to be exposed for applicable networks and registered accounts     in &#x60;LIST&#x60; response. **Disabled** by default.  Note: if no value supplied for an option the API behaves according to the defaults. Empty &#x60;view&#x60; parameter is interpreted as **\&quot;htmlForms,-jsonForms,-routes\&quot;** (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\NetworkList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentSessionWithHttpInfo($list_id, $view = null)
    {
        $returnType = '\Optile\Model\NetworkList';
        $request = $this->getPaymentSessionRequest($list_id, $view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\NetworkList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentSessionAsync
     *
     * Get LIST session details
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to retrieve (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options. Supplying unknown options or conflicting options combination (e.g. \&quot;-jsonForms,jsonForms\&quot;) will cause an error and HTTP 400 (Bad Request) response.  Following options are supported:   * &#x60;htmlForms&#x60; - this option enables generation of links to build HTML forms for applicable networks and registered     accounts in &#x60;LIST&#x60; response. **Enabled** by default.   * &#x60;jsonForms&#x60; - this option enables generation of structured (in JSON format) description of forms for applicable     networks and registered accounts in &#x60;LIST&#x60; response. **Disabled** by default.   * &#x60;routes&#x60; - this option enables routing configuration to be exposed for applicable networks and registered accounts     in &#x60;LIST&#x60; response. **Disabled** by default.  Note: if no value supplied for an option the API behaves according to the defaults. Empty &#x60;view&#x60; parameter is interpreted as **\&quot;htmlForms,-jsonForms,-routes\&quot;** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentSessionAsync($list_id, $view = null)
    {
        return $this->getPaymentSessionAsyncWithHttpInfo($list_id, $view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentSessionAsyncWithHttpInfo
     *
     * Get LIST session details
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to retrieve (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options. Supplying unknown options or conflicting options combination (e.g. \&quot;-jsonForms,jsonForms\&quot;) will cause an error and HTTP 400 (Bad Request) response.  Following options are supported:   * &#x60;htmlForms&#x60; - this option enables generation of links to build HTML forms for applicable networks and registered     accounts in &#x60;LIST&#x60; response. **Enabled** by default.   * &#x60;jsonForms&#x60; - this option enables generation of structured (in JSON format) description of forms for applicable     networks and registered accounts in &#x60;LIST&#x60; response. **Disabled** by default.   * &#x60;routes&#x60; - this option enables routing configuration to be exposed for applicable networks and registered accounts     in &#x60;LIST&#x60; response. **Disabled** by default.  Note: if no value supplied for an option the API behaves according to the defaults. Empty &#x60;view&#x60; parameter is interpreted as **\&quot;htmlForms,-jsonForms,-routes\&quot;** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentSessionAsyncWithHttpInfo($list_id, $view = null)
    {
        $returnType = '\Optile\Model\NetworkList';
        $request = $this->getPaymentSessionRequest($list_id, $view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentSession'
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to retrieve (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options. Supplying unknown options or conflicting options combination (e.g. \&quot;-jsonForms,jsonForms\&quot;) will cause an error and HTTP 400 (Bad Request) response.  Following options are supported:   * &#x60;htmlForms&#x60; - this option enables generation of links to build HTML forms for applicable networks and registered     accounts in &#x60;LIST&#x60; response. **Enabled** by default.   * &#x60;jsonForms&#x60; - this option enables generation of structured (in JSON format) description of forms for applicable     networks and registered accounts in &#x60;LIST&#x60; response. **Disabled** by default.   * &#x60;routes&#x60; - this option enables routing configuration to be exposed for applicable networks and registered accounts     in &#x60;LIST&#x60; response. **Disabled** by default.  Note: if no value supplied for an option the API behaves according to the defaults. Empty &#x60;view&#x60; parameter is interpreted as **\&quot;htmlForms,-jsonForms,-routes\&quot;** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentSessionRequest($list_id, $view = null)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling getPaymentSession'
            );
        }

        $resourcePath = '/lists/{listId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($view)) {
            $view = ObjectSerializer::serializeCollection($view, 'csv', true);
        }
        if ($view !== null) {
            $queryParams['view'] = ObjectSerializer::toQueryValue($view);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation selectPaymentAccount
     *
     * Select registered account of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $account_id The ID of account from registered customer to be selected (required)
     * @param  \Optile\Model\NetworkSelection $network_selection Holds information that network should be selected or unselected (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\AccountRegistration
     */
    public function selectPaymentAccount($list_id, $account_id, $network_selection, $view = null)
    {
        list($response) = $this->selectPaymentAccountWithHttpInfo($list_id, $account_id, $network_selection, $view);
        return $response;
    }

    /**
     * Operation selectPaymentAccountWithHttpInfo
     *
     * Select registered account of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $account_id The ID of account from registered customer to be selected (required)
     * @param  \Optile\Model\NetworkSelection $network_selection Holds information that network should be selected or unselected (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\AccountRegistration, HTTP status code, HTTP response headers (array of strings)
     */
    public function selectPaymentAccountWithHttpInfo($list_id, $account_id, $network_selection, $view = null)
    {
        $returnType = '\Optile\Model\AccountRegistration';
        $request = $this->selectPaymentAccountRequest($list_id, $account_id, $network_selection, $view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\AccountRegistration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation selectPaymentAccountAsync
     *
     * Select registered account of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $account_id The ID of account from registered customer to be selected (required)
     * @param  \Optile\Model\NetworkSelection $network_selection Holds information that network should be selected or unselected (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function selectPaymentAccountAsync($list_id, $account_id, $network_selection, $view = null)
    {
        return $this->selectPaymentAccountAsyncWithHttpInfo($list_id, $account_id, $network_selection, $view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation selectPaymentAccountAsyncWithHttpInfo
     *
     * Select registered account of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $account_id The ID of account from registered customer to be selected (required)
     * @param  \Optile\Model\NetworkSelection $network_selection Holds information that network should be selected or unselected (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function selectPaymentAccountAsyncWithHttpInfo($list_id, $account_id, $network_selection, $view = null)
    {
        $returnType = '\Optile\Model\AccountRegistration';
        $request = $this->selectPaymentAccountRequest($list_id, $account_id, $network_selection, $view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'selectPaymentAccount'
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $account_id The ID of account from registered customer to be selected (required)
     * @param  \Optile\Model\NetworkSelection $network_selection Holds information that network should be selected or unselected (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function selectPaymentAccountRequest($list_id, $account_id, $network_selection, $view = null)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling selectPaymentAccount'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling selectPaymentAccount'
            );
        }
        // verify the required parameter 'network_selection' is set
        if ($network_selection === null || (is_array($network_selection) && count($network_selection) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_selection when calling selectPaymentAccount'
            );
        }

        $resourcePath = '/lists/{listId}/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($view)) {
            $view = ObjectSerializer::serializeCollection($view, 'csv', true);
        }
        if ($view !== null) {
            $queryParams['view'] = ObjectSerializer::toQueryValue($view);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($network_selection)) {
            $_tempBody = $network_selection;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation selectPaymentNetwork
     *
     * Select payment network of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\NetworkSelection $network_selection Holds information that network should be selected or unselected (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\ApplicableNetwork
     */
    public function selectPaymentNetwork($list_id, $network, $network_selection, $view = null)
    {
        list($response) = $this->selectPaymentNetworkWithHttpInfo($list_id, $network, $network_selection, $view);
        return $response;
    }

    /**
     * Operation selectPaymentNetworkWithHttpInfo
     *
     * Select payment network of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\NetworkSelection $network_selection Holds information that network should be selected or unselected (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\ApplicableNetwork, HTTP status code, HTTP response headers (array of strings)
     */
    public function selectPaymentNetworkWithHttpInfo($list_id, $network, $network_selection, $view = null)
    {
        $returnType = '\Optile\Model\ApplicableNetwork';
        $request = $this->selectPaymentNetworkRequest($list_id, $network, $network_selection, $view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ApplicableNetwork',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation selectPaymentNetworkAsync
     *
     * Select payment network of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\NetworkSelection $network_selection Holds information that network should be selected or unselected (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function selectPaymentNetworkAsync($list_id, $network, $network_selection, $view = null)
    {
        return $this->selectPaymentNetworkAsyncWithHttpInfo($list_id, $network, $network_selection, $view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation selectPaymentNetworkAsyncWithHttpInfo
     *
     * Select payment network of LIST
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\NetworkSelection $network_selection Holds information that network should be selected or unselected (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function selectPaymentNetworkAsyncWithHttpInfo($list_id, $network, $network_selection, $view = null)
    {
        $returnType = '\Optile\Model\ApplicableNetwork';
        $request = $this->selectPaymentNetworkRequest($list_id, $network, $network_selection, $view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'selectPaymentNetwork'
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session (required)
     * @param  string $network The code of selected payment network (required)
     * @param  \Optile\Model\NetworkSelection $network_selection Holds information that network should be selected or unselected (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function selectPaymentNetworkRequest($list_id, $network, $network_selection, $view = null)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling selectPaymentNetwork'
            );
        }
        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling selectPaymentNetwork'
            );
        }
        // verify the required parameter 'network_selection' is set
        if ($network_selection === null || (is_array($network_selection) && count($network_selection) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_selection when calling selectPaymentNetwork'
            );
        }

        $resourcePath = '/lists/{listId}/{network}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($view)) {
            $view = ObjectSerializer::serializeCollection($view, 'csv', true);
        }
        if ($view !== null) {
            $queryParams['view'] = ObjectSerializer::toQueryValue($view);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($network !== null) {
            $resourcePath = str_replace(
                '{' . 'network' . '}',
                ObjectSerializer::toPathValue($network),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($network_selection)) {
            $_tempBody = $network_selection;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePaymentSession
     *
     * Update LIST session details
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to update (required)
     * @param  \Optile\Model\Transaction $transaction Transaction to update list session (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Optile\Model\NetworkList
     */
    public function updatePaymentSession($list_id, $transaction, $view = null)
    {
        list($response) = $this->updatePaymentSessionWithHttpInfo($list_id, $transaction, $view);
        return $response;
    }

    /**
     * Operation updatePaymentSessionWithHttpInfo
     *
     * Update LIST session details
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to update (required)
     * @param  \Optile\Model\Transaction $transaction Transaction to update list session (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \Optile\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Optile\Model\NetworkList, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentSessionWithHttpInfo($list_id, $transaction, $view = null)
    {
        $returnType = '\Optile\Model\NetworkList';
        $request = $this->updatePaymentSessionRequest($list_id, $transaction, $view);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\NetworkList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Optile\Model\ErrorInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePaymentSessionAsync
     *
     * Update LIST session details
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to update (required)
     * @param  \Optile\Model\Transaction $transaction Transaction to update list session (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentSessionAsync($list_id, $transaction, $view = null)
    {
        return $this->updatePaymentSessionAsyncWithHttpInfo($list_id, $transaction, $view)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentSessionAsyncWithHttpInfo
     *
     * Update LIST session details
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to update (required)
     * @param  \Optile\Model\Transaction $transaction Transaction to update list session (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentSessionAsyncWithHttpInfo($list_id, $transaction, $view = null)
    {
        $returnType = '\Optile\Model\NetworkList';
        $request = $this->updatePaymentSessionRequest($list_id, $transaction, $view);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePaymentSession'
     *
     * @param  string $list_id The &#x60;longId&#x60; of a &#x60;LIST&#x60; session to update (required)
     * @param  \Optile\Model\Transaction $transaction Transaction to update list session (required)
     * @param  string[] $view Enables or disables view options to configure response when creating or retrieving &#x60;LIST&#x60;. Multiple options can be combined in the single value of the &#x60;view&#x60; query parameter. Use comma (\&quot;,\&quot;) to separate options.  See \&quot;Get LIST session details\&quot; for more detailed information about the &#x60;view&#x60; query parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePaymentSessionRequest($list_id, $transaction, $view = null)
    {
        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling updatePaymentSession'
            );
        }
        // verify the required parameter 'transaction' is set
        if ($transaction === null || (is_array($transaction) && count($transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction when calling updatePaymentSession'
            );
        }

        $resourcePath = '/lists/{listId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($view)) {
            $view = ObjectSerializer::serializeCollection($view, 'csv', true);
        }
        if ($view !== null) {
            $queryParams['view'] = ObjectSerializer::toQueryValue($view);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listId' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($transaction)) {
            $_tempBody = $transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.optile.payment.enterprise-v1-extensible+json'],
                ['application/vnd.optile.payment.enterprise-v1-extensible+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
