<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'integration' => 'string',
        'transaction_id' => 'string',
        'country' => 'string',
        'channel' => 'string',
        'division' => 'string',
        'callback' => '\Optile\Model\Callback',
        'customer' => '\Optile\Model\Customer',
        'customer_score' => 'int',
        'client_info' => '\Optile\Model\ClientInfo',
        'payment' => '\Optile\Model\Payment',
        'products' => '\Optile\Model\Product[]',
        'update_only' => 'bool',
        'allow_delete' => 'bool',
        'preset_first' => 'bool',
        'style' => '\Optile\Model\Style',
        'preselection' => '\Optile\Model\Preselection',
        'extra_elements' => '\Optile\Model\ExtraElements',
        'mandate' => '\Optile\Model\Mandate',
        'installment' => '\Optile\Model\Installment',
        'checkout_configuration_name' => 'string',
        'risk_data' => '\Optile\Model\RiskData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'integration' => null,
        'transaction_id' => null,
        'country' => null,
        'channel' => null,
        'division' => null,
        'callback' => null,
        'customer' => null,
        'customer_score' => null,
        'client_info' => null,
        'payment' => null,
        'products' => null,
        'update_only' => null,
        'allow_delete' => null,
        'preset_first' => null,
        'style' => null,
        'preselection' => null,
        'extra_elements' => null,
        'mandate' => null,
        'installment' => null,
        'checkout_configuration_name' => null,
        'risk_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'integration' => 'integration',
        'transaction_id' => 'transactionId',
        'country' => 'country',
        'channel' => 'channel',
        'division' => 'division',
        'callback' => 'callback',
        'customer' => 'customer',
        'customer_score' => 'customerScore',
        'client_info' => 'clientInfo',
        'payment' => 'payment',
        'products' => 'products',
        'update_only' => 'updateOnly',
        'allow_delete' => 'allowDelete',
        'preset_first' => 'presetFirst',
        'style' => 'style',
        'preselection' => 'preselection',
        'extra_elements' => 'extraElements',
        'mandate' => 'mandate',
        'installment' => 'installment',
        'checkout_configuration_name' => 'checkoutConfigurationName',
        'risk_data' => 'riskData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'integration' => 'setIntegration',
        'transaction_id' => 'setTransactionId',
        'country' => 'setCountry',
        'channel' => 'setChannel',
        'division' => 'setDivision',
        'callback' => 'setCallback',
        'customer' => 'setCustomer',
        'customer_score' => 'setCustomerScore',
        'client_info' => 'setClientInfo',
        'payment' => 'setPayment',
        'products' => 'setProducts',
        'update_only' => 'setUpdateOnly',
        'allow_delete' => 'setAllowDelete',
        'preset_first' => 'setPresetFirst',
        'style' => 'setStyle',
        'preselection' => 'setPreselection',
        'extra_elements' => 'setExtraElements',
        'mandate' => 'setMandate',
        'installment' => 'setInstallment',
        'checkout_configuration_name' => 'setCheckoutConfigurationName',
        'risk_data' => 'setRiskData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'integration' => 'getIntegration',
        'transaction_id' => 'getTransactionId',
        'country' => 'getCountry',
        'channel' => 'getChannel',
        'division' => 'getDivision',
        'callback' => 'getCallback',
        'customer' => 'getCustomer',
        'customer_score' => 'getCustomerScore',
        'client_info' => 'getClientInfo',
        'payment' => 'getPayment',
        'products' => 'getProducts',
        'update_only' => 'getUpdateOnly',
        'allow_delete' => 'getAllowDelete',
        'preset_first' => 'getPresetFirst',
        'style' => 'getStyle',
        'preselection' => 'getPreselection',
        'extra_elements' => 'getExtraElements',
        'mandate' => 'getMandate',
        'installment' => 'getInstallment',
        'checkout_configuration_name' => 'getCheckoutConfigurationName',
        'risk_data' => 'getRiskData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INTEGRATION_DISPLAY_NATIVE = 'DISPLAY_NATIVE';
    const INTEGRATION_PURE_NATIVE = 'PURE_NATIVE';
    const INTEGRATION_HOSTED = 'HOSTED';
    const INTEGRATION_SELECTIVE_NATIVE = 'SELECTIVE_NATIVE';
    const CHANNEL_WEB_ORDER = 'WEB_ORDER';
    const CHANNEL_MOBILE_ORDER = 'MOBILE_ORDER';
    const CHANNEL_CUSTOMER_SELF_SERVICE = 'CUSTOMER_SELF_SERVICE';
    const CHANNEL_EMAIL_ORDER = 'EMAIL_ORDER';
    const CHANNEL_CALLCENTER_ORDER = 'CALLCENTER_ORDER';
    const CHANNEL_MAIL_ORDER = 'MAIL_ORDER';
    const CHANNEL_TERMINAL_ORDER = 'TERMINAL_ORDER';
    const CHANNEL_CUSTOMER_SUPPORT = 'CUSTOMER_SUPPORT';
    const CHANNEL_RECURRING = 'RECURRING';
    const CHANNEL_DUNNING = 'DUNNING';
    const CHANNEL_FULFILLMENT = 'FULFILLMENT';
    const CHANNEL_IMPORT = 'IMPORT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntegrationAllowableValues()
    {
        return [
            self::INTEGRATION_DISPLAY_NATIVE,
            self::INTEGRATION_PURE_NATIVE,
            self::INTEGRATION_HOSTED,
            self::INTEGRATION_SELECTIVE_NATIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_WEB_ORDER,
            self::CHANNEL_MOBILE_ORDER,
            self::CHANNEL_CUSTOMER_SELF_SERVICE,
            self::CHANNEL_EMAIL_ORDER,
            self::CHANNEL_CALLCENTER_ORDER,
            self::CHANNEL_MAIL_ORDER,
            self::CHANNEL_TERMINAL_ORDER,
            self::CHANNEL_CUSTOMER_SUPPORT,
            self::CHANNEL_RECURRING,
            self::CHANNEL_DUNNING,
            self::CHANNEL_FULFILLMENT,
            self::CHANNEL_IMPORT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['integration'] = isset($data['integration']) ? $data['integration'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['callback'] = isset($data['callback']) ? $data['callback'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['customer_score'] = isset($data['customer_score']) ? $data['customer_score'] : null;
        $this->container['client_info'] = isset($data['client_info']) ? $data['client_info'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['update_only'] = isset($data['update_only']) ? $data['update_only'] : null;
        $this->container['allow_delete'] = isset($data['allow_delete']) ? $data['allow_delete'] : null;
        $this->container['preset_first'] = isset($data['preset_first']) ? $data['preset_first'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['preselection'] = isset($data['preselection']) ? $data['preselection'] : null;
        $this->container['extra_elements'] = isset($data['extra_elements']) ? $data['extra_elements'] : null;
        $this->container['mandate'] = isset($data['mandate']) ? $data['mandate'] : null;
        $this->container['installment'] = isset($data['installment']) ? $data['installment'] : null;
        $this->container['checkout_configuration_name'] = isset($data['checkout_configuration_name']) ? $data['checkout_configuration_name'] : null;
        $this->container['risk_data'] = isset($data['risk_data']) ? $data['risk_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIntegrationAllowableValues();
        if (!is_null($this->container['integration']) && !in_array($this->container['integration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'integration', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'channel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['callback'] === null) {
            $invalidProperties[] = "'callback' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['payment'] === null) {
            $invalidProperties[] = "'payment' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets integration
     *
     * @return string
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param string $integration Defines what integration scenario this payment session is initialized for, default is `DISPLAY_NATIVE`. Selected scenario has an impact on operation URLs within response, they will be adjusted for selected integration scenario.  Possible integration types:   * `DISPLAY_NATIVE` (legacy name `NATIVE_WITHOUT_PCI`) - integration scenario where payment requests are sent from customer     browser directly to optile web service, but the logic to do so is implemented and/or rendered by merchant web-site.     Merchant has to be PCI DSS (**SAQ A-EP**) compliant to process payments with Credit/Debit Cards.   * `PURE_NATIVE` (legacy name `NATIVE_WITH_PCI`) - full native integration scenario where all requests (including payments)     are sent from merchant backend server. Merchant has to be PCI DSS (**SAQ D** - highest level of compliance) compliant to     process payments with Credit/Debit Cards.   * `HOSTED` - integration scenario where payment requests are sent from page rendered by optile server either direct in     browser or inside the IFrame of merchants web-site. Merchant has to be PCI DSS (**SAQ A** - lowest level of compliance)     compliant to process payments with Credit/Debit Cards.   * `SELECTIVE_NATIVE` - integration scenario where payment requests are sent from customer browser directly to optile web     service, but the logic to do so is implemented and/or rendered by merchant web-site for all methods except Credit/Debit     Cards. Credit/Debit Cards payments are rendered within IFrame served from optile server. Merchant has to be PCI DSS     (**SAQ A** - lowest level of compliance) compliant to process payments with Credit/Debit Cards.  See [Integration Scenarios](https://www.optile.io/opg#284716) chapter for detailed comparison of different integration types with optile payment service.
     *
     * @return $this
     */
    public function setIntegration($integration)
    {
        $allowedValues = $this->getIntegrationAllowableValues();
        if (!is_null($integration) && !in_array($integration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'integration', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Identifier for this transaction given by the merchant. It is not validated for uniqueness by OPG, but may be checked for by some PSPs, thus recommended to be unique.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country where the payment is originating. This influences the choice of the available payment networks. Value format is according to ISO 3166-1 (alpha-2), e.g. \"DE\", \"FR\", \"US\", \"GB\", etc.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel Indicates where the payment request comes from. For example, from a website, from a mobile device, or it is a recurring transaction from the merchant's backend.  By default `WEB_ORDER` for this type of transactions.
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($channel) && !in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string $division Division name of this transaction.  Merchant can configure multiple divisions via Merchant Configuration API or portal. But there is always one _default division_ that will be used if this property is undefined. Different divisions can be configured with different setup, contracts, payment routes and network options.
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets callback
     *
     * @return \Optile\Model\Callback
     */
    public function getCallback()
    {
        return $this->container['callback'];
    }

    /**
     * Sets callback
     *
     * @param \Optile\Model\Callback $callback callback
     *
     * @return $this
     */
    public function setCallback($callback)
    {
        $this->container['callback'] = $callback;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Optile\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Optile\Model\Customer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_score
     *
     * @return int
     */
    public function getCustomerScore()
    {
        return $this->container['customer_score'];
    }

    /**
     * Sets customer_score
     *
     * @param int $customer_score Customer score value in range 0...1000. This value will be used by the system for the decision that some security checks should be enforced or disabled (like 3D Security check).
     *
     * @return $this
     */
    public function setCustomerScore($customer_score)
    {
        $this->container['customer_score'] = $customer_score;

        return $this;
    }

    /**
     * Gets client_info
     *
     * @return \Optile\Model\ClientInfo
     */
    public function getClientInfo()
    {
        return $this->container['client_info'];
    }

    /**
     * Sets client_info
     *
     * @param \Optile\Model\ClientInfo $client_info client_info
     *
     * @return $this
     */
    public function setClientInfo($client_info)
    {
        $this->container['client_info'] = $client_info;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Optile\Model\Payment
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Optile\Model\Payment $payment payment
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Optile\Model\Product[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Optile\Model\Product[] $products Products (shopping cart) information.
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets update_only
     *
     * @return bool
     */
    public function getUpdateOnly()
    {
        return $this->container['update_only'];
    }

    /**
     * Sets update_only
     *
     * @param bool $update_only Indicates that this `LIST` transaction is initiated to update existing or register accounts of the of customer. No payment will take place in scope of this `LIST` session.
     *
     * @return $this
     */
    public function setUpdateOnly($update_only)
    {
        $this->container['update_only'] = $update_only;

        return $this;
    }

    /**
     * Gets allow_delete
     *
     * @return bool
     */
    public function getAllowDelete()
    {
        return $this->container['allow_delete'];
    }

    /**
     * Sets allow_delete
     *
     * @param bool $allow_delete Indicates that deletion of registered accounts is allowed in scope of this `LIST` session:   * If set to `true` the deletion accounts is explicitly permitted by merchant.   * If set to `false` the deletion accounts is explicitly disallowed by merchant.   * If nothing is set the default behavior applies: deletion is only allowed for `LIST`s in the `updateOnly` mode.
     *
     * @return $this
     */
    public function setAllowDelete($allow_delete)
    {
        $this->container['allow_delete'] = $allow_delete;

        return $this;
    }

    /**
     * Gets preset_first
     *
     * @return bool
     */
    public function getPresetFirst()
    {
        return $this->container['preset_first'];
    }

    /**
     * Sets preset_first
     *
     * @param bool $preset_first Indicates that this `LIST` transaction is initiated with 'preset' option. When selected by customer network and provided account are saved in the system until this `LIST` session will be closed by additional `CHARGE` request. Callback must specify 'summaryUrl' for this type of `LIST` transaction.
     *
     * @return $this
     */
    public function setPresetFirst($preset_first)
    {
        $this->container['preset_first'] = $preset_first;

        return $this;
    }

    /**
     * Gets style
     *
     * @return \Optile\Model\Style
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param \Optile\Model\Style $style style
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets preselection
     *
     * @return \Optile\Model\Preselection
     */
    public function getPreselection()
    {
        return $this->container['preselection'];
    }

    /**
     * Sets preselection
     *
     * @param \Optile\Model\Preselection $preselection preselection
     *
     * @return $this
     */
    public function setPreselection($preselection)
    {
        $this->container['preselection'] = $preselection;

        return $this;
    }

    /**
     * Gets extra_elements
     *
     * @return \Optile\Model\ExtraElements
     */
    public function getExtraElements()
    {
        return $this->container['extra_elements'];
    }

    /**
     * Sets extra_elements
     *
     * @param \Optile\Model\ExtraElements $extra_elements extra_elements
     *
     * @return $this
     */
    public function setExtraElements($extra_elements)
    {
        $this->container['extra_elements'] = $extra_elements;

        return $this;
    }

    /**
     * Gets mandate
     *
     * @return \Optile\Model\Mandate
     */
    public function getMandate()
    {
        return $this->container['mandate'];
    }

    /**
     * Sets mandate
     *
     * @param \Optile\Model\Mandate $mandate mandate
     *
     * @return $this
     */
    public function setMandate($mandate)
    {
        $this->container['mandate'] = $mandate;

        return $this;
    }

    /**
     * Gets installment
     *
     * @return \Optile\Model\Installment
     */
    public function getInstallment()
    {
        return $this->container['installment'];
    }

    /**
     * Sets installment
     *
     * @param \Optile\Model\Installment $installment installment
     *
     * @return $this
     */
    public function setInstallment($installment)
    {
        $this->container['installment'] = $installment;

        return $this;
    }

    /**
     * Gets checkout_configuration_name
     *
     * @return string
     */
    public function getCheckoutConfigurationName()
    {
        return $this->container['checkout_configuration_name'];
    }

    /**
     * Sets checkout_configuration_name
     *
     * @param string $checkout_configuration_name The name of the pre-selected checkout configuration.
     *
     * @return $this
     */
    public function setCheckoutConfigurationName($checkout_configuration_name)
    {
        $this->container['checkout_configuration_name'] = $checkout_configuration_name;

        return $this;
    }

    /**
     * Gets risk_data
     *
     * @return \Optile\Model\RiskData
     */
    public function getRiskData()
    {
        return $this->container['risk_data'];
    }

    /**
     * Sets risk_data
     *
     * @param \Optile\Model\RiskData $risk_data risk_data
     *
     * @return $this
     */
    public function setRiskData($risk_data)
    {
        $this->container['risk_data'] = $risk_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


