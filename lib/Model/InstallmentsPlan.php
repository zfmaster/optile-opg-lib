<?php
/**
 * InstallmentsPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * InstallmentsPlan Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InstallmentsPlan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstallmentsPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'description' => 'string',
        'number_of_installments' => 'int',
        'schedule' => '\Optile\Model\InstallmentItem[]',
        'due_days' => 'int[]',
        'currency' => 'string',
        'interest_amount' => 'double',
        'installment_setup_fee' => 'double',
        'installment_periodic_fee' => 'double',
        'installment_fee' => 'double',
        'total_amount' => 'double',
        'nominal_interest_rate' => 'double',
        'effective_interest_rate' => 'double',
        'credit_information_url' => 'string',
        'terms_and_conditions_url' => 'string',
        'data_privacy_consent_url' => 'string',
        'logo_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'description' => null,
        'number_of_installments' => null,
        'schedule' => null,
        'due_days' => null,
        'currency' => null,
        'interest_amount' => 'double',
        'installment_setup_fee' => 'double',
        'installment_periodic_fee' => 'double',
        'installment_fee' => 'double',
        'total_amount' => 'double',
        'nominal_interest_rate' => 'double',
        'effective_interest_rate' => 'double',
        'credit_information_url' => null,
        'terms_and_conditions_url' => null,
        'data_privacy_consent_url' => null,
        'logo_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'number_of_installments' => 'numberOfInstallments',
        'schedule' => 'schedule',
        'due_days' => 'dueDays',
        'currency' => 'currency',
        'interest_amount' => 'interestAmount',
        'installment_setup_fee' => 'installmentSetupFee',
        'installment_periodic_fee' => 'installmentPeriodicFee',
        'installment_fee' => 'installmentFee',
        'total_amount' => 'totalAmount',
        'nominal_interest_rate' => 'nominalInterestRate',
        'effective_interest_rate' => 'effectiveInterestRate',
        'credit_information_url' => 'creditInformationUrl',
        'terms_and_conditions_url' => 'termsAndConditionsUrl',
        'data_privacy_consent_url' => 'dataPrivacyConsentUrl',
        'logo_url' => 'logoUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'number_of_installments' => 'setNumberOfInstallments',
        'schedule' => 'setSchedule',
        'due_days' => 'setDueDays',
        'currency' => 'setCurrency',
        'interest_amount' => 'setInterestAmount',
        'installment_setup_fee' => 'setInstallmentSetupFee',
        'installment_periodic_fee' => 'setInstallmentPeriodicFee',
        'installment_fee' => 'setInstallmentFee',
        'total_amount' => 'setTotalAmount',
        'nominal_interest_rate' => 'setNominalInterestRate',
        'effective_interest_rate' => 'setEffectiveInterestRate',
        'credit_information_url' => 'setCreditInformationUrl',
        'terms_and_conditions_url' => 'setTermsAndConditionsUrl',
        'data_privacy_consent_url' => 'setDataPrivacyConsentUrl',
        'logo_url' => 'setLogoUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'number_of_installments' => 'getNumberOfInstallments',
        'schedule' => 'getSchedule',
        'due_days' => 'getDueDays',
        'currency' => 'getCurrency',
        'interest_amount' => 'getInterestAmount',
        'installment_setup_fee' => 'getInstallmentSetupFee',
        'installment_periodic_fee' => 'getInstallmentPeriodicFee',
        'installment_fee' => 'getInstallmentFee',
        'total_amount' => 'getTotalAmount',
        'nominal_interest_rate' => 'getNominalInterestRate',
        'effective_interest_rate' => 'getEffectiveInterestRate',
        'credit_information_url' => 'getCreditInformationUrl',
        'terms_and_conditions_url' => 'getTermsAndConditionsUrl',
        'data_privacy_consent_url' => 'getDataPrivacyConsentUrl',
        'logo_url' => 'getLogoUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['number_of_installments'] = isset($data['number_of_installments']) ? $data['number_of_installments'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['due_days'] = isset($data['due_days']) ? $data['due_days'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['interest_amount'] = isset($data['interest_amount']) ? $data['interest_amount'] : null;
        $this->container['installment_setup_fee'] = isset($data['installment_setup_fee']) ? $data['installment_setup_fee'] : null;
        $this->container['installment_periodic_fee'] = isset($data['installment_periodic_fee']) ? $data['installment_periodic_fee'] : null;
        $this->container['installment_fee'] = isset($data['installment_fee']) ? $data['installment_fee'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['nominal_interest_rate'] = isset($data['nominal_interest_rate']) ? $data['nominal_interest_rate'] : null;
        $this->container['effective_interest_rate'] = isset($data['effective_interest_rate']) ? $data['effective_interest_rate'] : null;
        $this->container['credit_information_url'] = isset($data['credit_information_url']) ? $data['credit_information_url'] : null;
        $this->container['terms_and_conditions_url'] = isset($data['terms_and_conditions_url']) ? $data['terms_and_conditions_url'] : null;
        $this->container['data_privacy_consent_url'] = isset($data['data_privacy_consent_url']) ? $data['data_privacy_consent_url'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of this installments plan.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the installments plan.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets number_of_installments
     *
     * @return int
     */
    public function getNumberOfInstallments()
    {
        return $this->container['number_of_installments'];
    }

    /**
     * Sets number_of_installments
     *
     * @param int $number_of_installments Number of installments in the installments plan.
     *
     * @return $this
     */
    public function setNumberOfInstallments($number_of_installments)
    {
        $this->container['number_of_installments'] = $number_of_installments;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \Optile\Model\InstallmentItem[]
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \Optile\Model\InstallmentItem[] $schedule Collection of particular installment with payment date and amount.
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets due_days
     *
     * @return int[]
     */
    public function getDueDays()
    {
        return $this->container['due_days'];
    }

    /**
     * Sets due_days
     *
     * @param int[] $due_days Collection of possible payment days like 1, 15, 28, etc.
     *
     * @return $this
     */
    public function setDueDays($due_days)
    {
        $this->container['due_days'] = $due_days;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency 3-letter currency code (ISO 4217) of all payment amounts within current installments plan.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets interest_amount
     *
     * @return double
     */
    public function getInterestAmount()
    {
        return $this->container['interest_amount'];
    }

    /**
     * Sets interest_amount
     *
     * @param double $interest_amount The interest amount in major units.
     *
     * @return $this
     */
    public function setInterestAmount($interest_amount)
    {
        $this->container['interest_amount'] = $interest_amount;

        return $this;
    }

    /**
     * Gets installment_setup_fee
     *
     * @return double
     */
    public function getInstallmentSetupFee()
    {
        return $this->container['installment_setup_fee'];
    }

    /**
     * Sets installment_setup_fee
     *
     * @param double $installment_setup_fee The fee for setting up the installment plan in major units.
     *
     * @return $this
     */
    public function setInstallmentSetupFee($installment_setup_fee)
    {
        $this->container['installment_setup_fee'] = $installment_setup_fee;

        return $this;
    }

    /**
     * Gets installment_periodic_fee
     *
     * @return double
     */
    public function getInstallmentPeriodicFee()
    {
        return $this->container['installment_periodic_fee'];
    }

    /**
     * Sets installment_periodic_fee
     *
     * @param double $installment_periodic_fee The constant periodic fee for each installment in major units. Should be supplied only when it is the same for every installment.
     *
     * @return $this
     */
    public function setInstallmentPeriodicFee($installment_periodic_fee)
    {
        $this->container['installment_periodic_fee'] = $installment_periodic_fee;

        return $this;
    }

    /**
     * Gets installment_fee
     *
     * @return double
     */
    public function getInstallmentFee()
    {
        return $this->container['installment_fee'];
    }

    /**
     * Sets installment_fee
     *
     * @param double $installment_fee The total fee for the installment payment (or service-charge-amount) in major units. It should match the sum of all installment periodic fees and the installment set-up fee.
     *
     * @return $this
     */
    public function setInstallmentFee($installment_fee)
    {
        $this->container['installment_fee'] = $installment_fee;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount The total transaction amount in major units (including original amount, all fees and the interest).
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets nominal_interest_rate
     *
     * @return double
     */
    public function getNominalInterestRate()
    {
        return $this->container['nominal_interest_rate'];
    }

    /**
     * Sets nominal_interest_rate
     *
     * @param double $nominal_interest_rate The interest rate per year in percentages (Nominalzins or Sollzins).
     *
     * @return $this
     */
    public function setNominalInterestRate($nominal_interest_rate)
    {
        $this->container['nominal_interest_rate'] = $nominal_interest_rate;

        return $this;
    }

    /**
     * Gets effective_interest_rate
     *
     * @return double
     */
    public function getEffectiveInterestRate()
    {
        return $this->container['effective_interest_rate'];
    }

    /**
     * Sets effective_interest_rate
     *
     * @param double $effective_interest_rate The effective interest rate per year in percentages (Effektivzins).
     *
     * @return $this
     */
    public function setEffectiveInterestRate($effective_interest_rate)
    {
        $this->container['effective_interest_rate'] = $effective_interest_rate;

        return $this;
    }

    /**
     * Gets credit_information_url
     *
     * @return string
     */
    public function getCreditInformationUrl()
    {
        return $this->container['credit_information_url'];
    }

    /**
     * Sets credit_information_url
     *
     * @param string $credit_information_url URL to the Credit Information document.
     *
     * @return $this
     */
    public function setCreditInformationUrl($credit_information_url)
    {
        $this->container['credit_information_url'] = $credit_information_url;

        return $this;
    }

    /**
     * Gets terms_and_conditions_url
     *
     * @return string
     */
    public function getTermsAndConditionsUrl()
    {
        return $this->container['terms_and_conditions_url'];
    }

    /**
     * Sets terms_and_conditions_url
     *
     * @param string $terms_and_conditions_url URL to terms and conditions information document.
     *
     * @return $this
     */
    public function setTermsAndConditionsUrl($terms_and_conditions_url)
    {
        $this->container['terms_and_conditions_url'] = $terms_and_conditions_url;

        return $this;
    }

    /**
     * Gets data_privacy_consent_url
     *
     * @return string
     */
    public function getDataPrivacyConsentUrl()
    {
        return $this->container['data_privacy_consent_url'];
    }

    /**
     * Sets data_privacy_consent_url
     *
     * @param string $data_privacy_consent_url URL to the data privacy consent document.
     *
     * @return $this
     */
    public function setDataPrivacyConsentUrl($data_privacy_consent_url)
    {
        $this->container['data_privacy_consent_url'] = $data_privacy_consent_url;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url URL to the installment plan logo.
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


