<?php
/**
 * ExpressTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * ExpressTransaction Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExpressTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExpressTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'integration' => 'string',
        'transaction_id' => 'string',
        'country' => 'string',
        'division' => 'string',
        'callback' => '\Optile\Model\Callback',
        'customer' => '\Optile\Model\Customer',
        'client_info' => '\Optile\Model\ClientInfo',
        'payment' => '\Optile\Model\Payment',
        'products' => '\Optile\Model\Product[]',
        'style' => '\Optile\Model\StandaloneStyle',
        'provider_request' => '\Optile\Model\ProviderParameters'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'integration' => null,
        'transaction_id' => null,
        'country' => null,
        'division' => null,
        'callback' => null,
        'customer' => null,
        'client_info' => null,
        'payment' => null,
        'products' => null,
        'style' => null,
        'provider_request' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'integration' => 'integration',
        'transaction_id' => 'transactionId',
        'country' => 'country',
        'division' => 'division',
        'callback' => 'callback',
        'customer' => 'customer',
        'client_info' => 'clientInfo',
        'payment' => 'payment',
        'products' => 'products',
        'style' => 'style',
        'provider_request' => 'providerRequest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'integration' => 'setIntegration',
        'transaction_id' => 'setTransactionId',
        'country' => 'setCountry',
        'division' => 'setDivision',
        'callback' => 'setCallback',
        'customer' => 'setCustomer',
        'client_info' => 'setClientInfo',
        'payment' => 'setPayment',
        'products' => 'setProducts',
        'style' => 'setStyle',
        'provider_request' => 'setProviderRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'integration' => 'getIntegration',
        'transaction_id' => 'getTransactionId',
        'country' => 'getCountry',
        'division' => 'getDivision',
        'callback' => 'getCallback',
        'customer' => 'getCustomer',
        'client_info' => 'getClientInfo',
        'payment' => 'getPayment',
        'products' => 'getProducts',
        'style' => 'getStyle',
        'provider_request' => 'getProviderRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INTEGRATION_PURE_NATIVE = 'PURE_NATIVE';
    const INTEGRATION_DISPLAY_NATIVE = 'DISPLAY_NATIVE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntegrationAllowableValues()
    {
        return [
            self::INTEGRATION_PURE_NATIVE,
            self::INTEGRATION_DISPLAY_NATIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['integration'] = isset($data['integration']) ? $data['integration'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['callback'] = isset($data['callback']) ? $data['callback'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['client_info'] = isset($data['client_info']) ? $data['client_info'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['provider_request'] = isset($data['provider_request']) ? $data['provider_request'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIntegrationAllowableValues();
        if (!is_null($this->container['integration']) && !in_array($this->container['integration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'integration', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['callback'] === null) {
            $invalidProperties[] = "'callback' can't be null";
        }
        if ($this->container['payment'] === null) {
            $invalidProperties[] = "'payment' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets integration
     *
     * @return string
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param string $integration Defines integration scenario of for this `EXPRESSPRESET` session. Selected scenario has an impact on operation URL within response, it is adjusted for selected integration scenario.  Default: `PURE_NATIVE`
     *
     * @return $this
     */
    public function setIntegration($integration)
    {
        $allowedValues = $this->getIntegrationAllowableValues();
        if (!is_null($integration) && !in_array($integration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'integration', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Identifier for this payment transaction given by the merchant. It is not validated for uniqueness by OPG, but may be checked for by some PSPs, thus recommended to be unique.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country where the payment is originating. This influences the choice of the available payment networks. Value format is according to ISO 3166-1 (alpha-2), e.g. \"DE\", \"FR\", \"US\", \"GB\", etc.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string $division Division name of this transaction.  Merchant can configure multiple divisions via Merchant Configuration API or portal. But there is always one _default division_ that will be used if this property is undefined. Different divisions can be configured with different setup, contracts, payment routes and network options.
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets callback
     *
     * @return \Optile\Model\Callback
     */
    public function getCallback()
    {
        return $this->container['callback'];
    }

    /**
     * Sets callback
     *
     * @param \Optile\Model\Callback $callback Callback information about merchants shop system. It is strongly advised to provide this data with every transaction.  Note: for `EXPRESSPRESET` operation the `summaryUrl` is a mandatory parameter.
     *
     * @return $this
     */
    public function setCallback($callback)
    {
        $this->container['callback'] = $callback;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Optile\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Optile\Model\Customer $customer Information about customer.  Note: for `EXPRESSPRESET` operation this information is optional since the details about customer (payer) will be collected from PSP.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets client_info
     *
     * @return \Optile\Model\ClientInfo
     */
    public function getClientInfo()
    {
        return $this->container['client_info'];
    }

    /**
     * Sets client_info
     *
     * @param \Optile\Model\ClientInfo $client_info client_info
     *
     * @return $this
     */
    public function setClientInfo($client_info)
    {
        $this->container['client_info'] = $client_info;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Optile\Model\Payment
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Optile\Model\Payment $payment payment
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Optile\Model\Product[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Optile\Model\Product[] $products Products (shopping cart) information.
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets style
     *
     * @return \Optile\Model\StandaloneStyle
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param \Optile\Model\StandaloneStyle $style style
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets provider_request
     *
     * @return \Optile\Model\ProviderParameters
     */
    public function getProviderRequest()
    {
        return $this->container['provider_request'];
    }

    /**
     * Sets provider_request
     *
     * @param \Optile\Model\ProviderParameters $provider_request Provider request parameters to pass from front-end JavaScript library of dedicated provider to the back-end logic (adapter) during express checkout initialization.  Note: this set of parameters is PSP specific, it may vary in content or can also be `null`.
     *
     * @return $this
     */
    public function setProviderRequest($provider_request)
    {
        $this->container['provider_request'] = $provider_request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


