<?php
/**
 * OperationResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * OperationResult Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OperationResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OperationResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'result_info' => 'string',
        'interaction' => '\Optile\Model\Interaction',
        'redirect' => '\Optile\Model\Redirect',
        'provider_response' => '\Optile\Model\ProviderParameters'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'result_info' => null,
        'interaction' => null,
        'redirect' => null,
        'provider_response' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'result_info' => 'resultInfo',
        'interaction' => 'interaction',
        'redirect' => 'redirect',
        'provider_response' => 'providerResponse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'result_info' => 'setResultInfo',
        'interaction' => 'setInteraction',
        'redirect' => 'setRedirect',
        'provider_response' => 'setProviderResponse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'result_info' => 'getResultInfo',
        'interaction' => 'getInteraction',
        'redirect' => 'getRedirect',
        'provider_response' => 'getProviderResponse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['result_info'] = isset($data['result_info']) ? $data['result_info'] : null;
        $this->container['interaction'] = isset($data['interaction']) ? $data['interaction'] : null;
        $this->container['redirect'] = isset($data['redirect']) ? $data['redirect'] : null;
        $this->container['provider_response'] = isset($data['provider_response']) ? $data['provider_response'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['result_info'] === null) {
            $invalidProperties[] = "'result_info' can't be null";
        }
        if ($this->container['interaction'] === null) {
            $invalidProperties[] = "'interaction' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets result_info
     *
     * @return string
     */
    public function getResultInfo()
    {
        return $this->container['result_info'];
    }

    /**
     * Sets result_info
     *
     * @param string $result_info Descriptive information that complements the interaction advice.
     *
     * @return $this
     */
    public function setResultInfo($result_info)
    {
        $this->container['result_info'] = $result_info;

        return $this;
    }

    /**
     * Gets interaction
     *
     * @return \Optile\Model\Interaction
     */
    public function getInteraction()
    {
        return $this->container['interaction'];
    }

    /**
     * Sets interaction
     *
     * @param \Optile\Model\Interaction $interaction Interaction advice for the operation result.
     *
     * @return $this
     */
    public function setInteraction($interaction)
    {
        $this->container['interaction'] = $interaction;

        return $this;
    }

    /**
     * Gets redirect
     *
     * @return \Optile\Model\Redirect
     */
    public function getRedirect()
    {
        return $this->container['redirect'];
    }

    /**
     * Sets redirect
     *
     * @param \Optile\Model\Redirect $redirect If present, merchant is advised to redirect customer to corresponding redirect URL.  This will lead to either PSP web-site to complete initiated payment, or it will be pointing to one of the merchants callback URLs from `LIST` session.
     *
     * @return $this
     */
    public function setRedirect($redirect)
    {
        $this->container['redirect'] = $redirect;

        return $this;
    }

    /**
     * Gets provider_response
     *
     * @return \Optile\Model\ProviderParameters
     */
    public function getProviderResponse()
    {
        return $this->container['provider_response'];
    }

    /**
     * Sets provider_response
     *
     * @param \Optile\Model\ProviderParameters $provider_response Provider response data given back by the target provider as a result of transaction action. This data should contain all needed information to continue customer's journey on the payment page in the scope of used network.
     *
     * @return $this
     */
    public function setProviderResponse($provider_response)
    {
        $this->container['provider_response'] = $provider_response;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


