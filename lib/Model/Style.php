<?php
/**
 * Style
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * Style Class Doc Comment
 *
 * @category Class
 * @description Allows to change default appearance of payment page. It applies to either hosted payment page (for &#x60;HOSTED&#x60; integration type), or to the page rendered by &#x60;op-payment-widget&#x60; (see AJAX integration topic).
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Style implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Style';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'language' => 'string',
        'theme' => 'string',
        'css_override' => 'string',
        'client' => 'string',
        'resolution' => 'string',
        'hosted_version' => 'string',
        'challenge_window_size' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'language' => null,
        'theme' => null,
        'css_override' => null,
        'client' => null,
        'resolution' => null,
        'hosted_version' => null,
        'challenge_window_size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language' => 'language',
        'theme' => 'theme',
        'css_override' => 'cssOverride',
        'client' => 'client',
        'resolution' => 'resolution',
        'hosted_version' => 'hostedVersion',
        'challenge_window_size' => 'challengeWindowSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language' => 'setLanguage',
        'theme' => 'setTheme',
        'css_override' => 'setCssOverride',
        'client' => 'setClient',
        'resolution' => 'setResolution',
        'hosted_version' => 'setHostedVersion',
        'challenge_window_size' => 'setChallengeWindowSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language' => 'getLanguage',
        'theme' => 'getTheme',
        'css_override' => 'getCssOverride',
        'client' => 'getClient',
        'resolution' => 'getResolution',
        'hosted_version' => 'getHostedVersion',
        'challenge_window_size' => 'getChallengeWindowSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CLIENT_PHONE = 'PHONE';
    const CLIENT_DESKTOP = 'DESKTOP';
    const CLIENT_AUTO = 'AUTO';
    const CLIENT_RESPONSIVE = 'RESPONSIVE';
    const RESOLUTION__1X = '1x';
    const RESOLUTION__2X = '2x';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClientAllowableValues()
    {
        return [
            self::CLIENT_PHONE,
            self::CLIENT_DESKTOP,
            self::CLIENT_AUTO,
            self::CLIENT_RESPONSIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResolutionAllowableValues()
    {
        return [
            self::RESOLUTION__1X,
            self::RESOLUTION__2X,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['css_override'] = isset($data['css_override']) ? $data['css_override'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['resolution'] = isset($data['resolution']) ? $data['resolution'] : null;
        $this->container['hosted_version'] = isset($data['hosted_version']) ? $data['hosted_version'] : null;
        $this->container['challenge_window_size'] = isset($data['challenge_window_size']) ? $data['challenge_window_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getClientAllowableValues();
        if (!is_null($this->container['client']) && !in_array($this->container['client'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'client', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResolutionAllowableValues();
        if (!is_null($this->container['resolution']) && !in_array($this->container['resolution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'resolution', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language Preferred language for payment page. If undefined will be decided upon country information from transaction object.  Format `<language code>[_<COUNTRY CODE>]`, where `<language code>` is a mandatory part that comply with [ISO 639-1 (alpha-2)](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes), and `<COUNTRY CODE>` is an optional part that comply with [ISO 3166-1 (alpha-2)](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).  Examples: `de` - for German, `de_CH` - for Swiss German
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string $theme The theme code for hosted payment page. For example, \"light\", \"dark\", \"highcontrast\", etc.  **Deprecated!** This property is not supported in OPG II and will be ignored. Use `cssOverride` to change style and appearance of hosted payment page.
     *
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets css_override
     *
     * @return string
     */
    public function getCssOverride()
    {
        return $this->container['css_override'];
    }

    /**
     * Sets css_override
     *
     * @param string $css_override URL of merchant custom CSS for payment page. It can be hosted anywhere but must be accessible through \"https\" protocol.
     *
     * @return $this
     */
    public function setCssOverride($css_override)
    {
        $this->container['css_override'] = $css_override;

        return $this;
    }

    /**
     * Gets client
     *
     * @return string
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param string $client Defines the type of customer client. By default `AUTO`.  It has an impact on payment page style and only considered during `HOSTED` integration type. If set to `RESPONSIVE` customer will face a new version of hosted payment page with networks logo links pointing to high resolution images. Also see `resolution` and `hostedVersion` properties.
     *
     * @return $this
     */
    public function setClient($client)
    {
        $allowedValues = $this->getClientAllowableValues();
        if (!is_null($client) && !in_array($client, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'client', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return string
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param string $resolution Allows to define resolution of networks logo images. Currently supported values `1x` - for _old_ images where the height is 32px, and `2x` - for high resolution logos with double height (64px).
     *
     * @return $this
     */
    public function setResolution($resolution)
    {
        $allowedValues = $this->getResolutionAllowableValues();
        if (!is_null($resolution) && !in_array($resolution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'resolution', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets hosted_version
     *
     * @return string
     */
    public function getHostedVersion()
    {
        return $this->container['hosted_version'];
    }

    /**
     * Sets hosted_version
     *
     * @param string $hosted_version Version of hosted payment page that merchant would prefer to render the `LIST` session with when using `HOSTED` integration type. If specified this field overrides value specified in property `client` and refers to the responsive hosted payment pages of explicit version. If this field is not specified and `client` is set to `RESPONSIVE` then `v2` is used by default.  Examples: `v2`, `v3`, `v3.1`, etc.
     *
     * @return $this
     */
    public function setHostedVersion($hosted_version)
    {
        $this->container['hosted_version'] = $hosted_version;

        return $this;
    }

    /**
     * Gets challenge_window_size
     *
     * @return string
     */
    public function getChallengeWindowSize()
    {
        return $this->container['challenge_window_size'];
    }

    /**
     * Sets challenge_window_size
     *
     * @param string $challenge_window_size Challenge Window size the issuer should use to display the challenge. If the input value does not match any of the possible values, a default option specific to payment service provider will be used. Possible values (enumerated in 3DS2 specification):   - fullPage   - 250x400   - 390x400   - 500x600   - 600x400
     *
     * @return $this
     */
    public function setChallengeWindowSize($challenge_window_size)
    {
        $this->container['challenge_window_size'] = $challenge_window_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


