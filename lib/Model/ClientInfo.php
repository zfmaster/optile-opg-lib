<?php
/**
 * ClientInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * ClientInfo Class Doc Comment
 *
 * @category Class
 * @description Information about customers client (web browser, mobile device, etc.).
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ip' => 'string',
        'ipv6' => 'string',
        'user_agent' => 'string',
        'accept_header' => 'string',
        'cookie_id' => 'string',
        'device_id' => 'string',
        'headers' => '\Optile\Model\Parameter[]',
        'java_enabled' => 'bool',
        'language' => 'string',
        'color_depth' => 'int',
        'timezone' => 'string',
        'browser_screen_width' => 'int',
        'browser_screen_height' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ip' => null,
        'ipv6' => null,
        'user_agent' => null,
        'accept_header' => null,
        'cookie_id' => null,
        'device_id' => null,
        'headers' => null,
        'java_enabled' => null,
        'language' => null,
        'color_depth' => null,
        'timezone' => null,
        'browser_screen_width' => null,
        'browser_screen_height' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip' => 'ip',
        'ipv6' => 'ipv6',
        'user_agent' => 'userAgent',
        'accept_header' => 'acceptHeader',
        'cookie_id' => 'cookieId',
        'device_id' => 'deviceId',
        'headers' => 'headers',
        'java_enabled' => 'javaEnabled',
        'language' => 'language',
        'color_depth' => 'colorDepth',
        'timezone' => 'timezone',
        'browser_screen_width' => 'browserScreenWidth',
        'browser_screen_height' => 'browserScreenHeight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip' => 'setIp',
        'ipv6' => 'setIpv6',
        'user_agent' => 'setUserAgent',
        'accept_header' => 'setAcceptHeader',
        'cookie_id' => 'setCookieId',
        'device_id' => 'setDeviceId',
        'headers' => 'setHeaders',
        'java_enabled' => 'setJavaEnabled',
        'language' => 'setLanguage',
        'color_depth' => 'setColorDepth',
        'timezone' => 'setTimezone',
        'browser_screen_width' => 'setBrowserScreenWidth',
        'browser_screen_height' => 'setBrowserScreenHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip' => 'getIp',
        'ipv6' => 'getIpv6',
        'user_agent' => 'getUserAgent',
        'accept_header' => 'getAcceptHeader',
        'cookie_id' => 'getCookieId',
        'device_id' => 'getDeviceId',
        'headers' => 'getHeaders',
        'java_enabled' => 'getJavaEnabled',
        'language' => 'getLanguage',
        'color_depth' => 'getColorDepth',
        'timezone' => 'getTimezone',
        'browser_screen_width' => 'getBrowserScreenWidth',
        'browser_screen_height' => 'getBrowserScreenHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['ipv6'] = isset($data['ipv6']) ? $data['ipv6'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
        $this->container['accept_header'] = isset($data['accept_header']) ? $data['accept_header'] : null;
        $this->container['cookie_id'] = isset($data['cookie_id']) ? $data['cookie_id'] : null;
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
        $this->container['headers'] = isset($data['headers']) ? $data['headers'] : null;
        $this->container['java_enabled'] = isset($data['java_enabled']) ? $data['java_enabled'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['color_depth'] = isset($data['color_depth']) ? $data['color_depth'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['browser_screen_width'] = isset($data['browser_screen_width']) ? $data['browser_screen_width'] : null;
        $this->container['browser_screen_height'] = isset($data['browser_screen_height']) ? $data['browser_screen_height'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip The customer's IP v4 address, e.g. \"67.23.211.9\". This can be used by advanced risk management.
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets ipv6
     *
     * @return string
     */
    public function getIpv6()
    {
        return $this->container['ipv6'];
    }

    /**
     * Sets ipv6
     *
     * @param string $ipv6 The customer's IP v6 address, e.g. \"2001:0db8:85a3:08d3:1319:8a2e:0370:7344\". This can be used by advanced risk management.
     *
     * @return $this
     */
    public function setIpv6($ipv6)
    {
        $this->container['ipv6'] = $ipv6;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string $user_agent The userAgent header string as provided by the customer's client, e.g. browser. This can be used for payment network selection or by hosted payment pages from optile or PSP to improve user experience during checkout.
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets accept_header
     *
     * @return string
     */
    public function getAcceptHeader()
    {
        return $this->container['accept_header'];
    }

    /**
     * Sets accept_header
     *
     * @param string $accept_header The accept header string as provided by the customer's client, e.g. browser.
     *
     * @return $this
     */
    public function setAcceptHeader($accept_header)
    {
        $this->container['accept_header'] = $accept_header;

        return $this;
    }

    /**
     * Gets cookie_id
     *
     * @return string
     */
    public function getCookieId()
    {
        return $this->container['cookie_id'];
    }

    /**
     * Sets cookie_id
     *
     * @param string $cookie_id Tracking cookie ID. Can be used by merchant to track or refer customer web clients.
     *
     * @return $this
     */
    public function setCookieId($cookie_id)
    {
        $this->container['cookie_id'] = $cookie_id;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string $device_id Unique device ID of a smartphone, i.e. this ID is called by Apple \"UUID\" and by Google \"Android ID\".
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return \Optile\Model\Parameter[]
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param \Optile\Model\Parameter[] $headers An array of additional client specific headers like 'Referer'. You can also provide here 'User-Agent' or 'Accept' headers and do not provide them as dedicated properties.
     *
     * @return $this
     */
    public function setHeaders($headers)
    {
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets java_enabled
     *
     * @return bool
     */
    public function getJavaEnabled()
    {
        return $this->container['java_enabled'];
    }

    /**
     * Sets java_enabled
     *
     * @param bool $java_enabled The ability of the cardholder browser to execute Java. Value is returned from the navigator.javaEnabled property.
     *
     * @return $this
     */
    public function setJavaEnabled($java_enabled)
    {
        $this->container['java_enabled'] = $java_enabled;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language Represents the browser language as defined in IETF BCP47. The value is limited to 1-8 characters. Value is returned from navigator.language property.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets color_depth
     *
     * @return int
     */
    public function getColorDepth()
    {
        return $this->container['color_depth'];
    }

    /**
     * Sets color_depth
     *
     * @param int $color_depth Representing the bit depth of the color palette for displaying images, in bits per pixel. Obtained from cardholder browser using the screen.colorDepth property.
     *
     * @return $this
     */
    public function setColorDepth($color_depth)
    {
        $this->container['color_depth'] = $color_depth;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets browser_screen_width
     *
     * @return int
     */
    public function getBrowserScreenWidth()
    {
        return $this->container['browser_screen_width'];
    }

    /**
     * Sets browser_screen_width
     *
     * @param int $browser_screen_width Cardholder's browser window width in pixels. See [w3schools example](https://www.w3schools.com/jsref/prop_win_innerheight.asp) how to get it.
     *
     * @return $this
     */
    public function setBrowserScreenWidth($browser_screen_width)
    {
        $this->container['browser_screen_width'] = $browser_screen_width;

        return $this;
    }

    /**
     * Gets browser_screen_height
     *
     * @return int
     */
    public function getBrowserScreenHeight()
    {
        return $this->container['browser_screen_height'];
    }

    /**
     * Sets browser_screen_height
     *
     * @param int $browser_screen_height Cardholder's browser window height in pixels. See [w3schools example](https://www.w3schools.com/jsref/prop_win_innerheight.asp) how to get it.
     *
     * @return $this
     */
    public function setBrowserScreenHeight($browser_screen_height)
    {
        $this->container['browser_screen_height'] = $browser_screen_height;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


