<?php
/**
 * ApplicableNetwork
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * ApplicableNetwork Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicableNetwork implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicableNetwork';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'label' => 'string',
        'method' => 'string',
        'grouping' => 'string',
        'registration' => 'string',
        'recurrence' => 'string',
        'redirect' => 'bool',
        'button' => 'string',
        'selected' => 'bool',
        'contract_data' => 'map[string,string]',
        'form_data' => '\Optile\Model\FormData',
        'i_frame_height' => 'int',
        'empty_form' => 'bool',
        'localized_input_elements' => '\Optile\Model\InputElement[]',
        'routing' => '\Optile\Model\Routing',
        'links' => '\Optile\Model\NetworkLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'label' => null,
        'method' => null,
        'grouping' => null,
        'registration' => null,
        'recurrence' => null,
        'redirect' => null,
        'button' => null,
        'selected' => null,
        'contract_data' => null,
        'form_data' => null,
        'i_frame_height' => 'int32',
        'empty_form' => null,
        'localized_input_elements' => null,
        'routing' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'label' => 'label',
        'method' => 'method',
        'grouping' => 'grouping',
        'registration' => 'registration',
        'recurrence' => 'recurrence',
        'redirect' => 'redirect',
        'button' => 'button',
        'selected' => 'selected',
        'contract_data' => 'contractData',
        'form_data' => 'formData',
        'i_frame_height' => 'iFrameHeight',
        'empty_form' => 'emptyForm',
        'localized_input_elements' => 'localizedInputElements',
        'routing' => 'routing',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'label' => 'setLabel',
        'method' => 'setMethod',
        'grouping' => 'setGrouping',
        'registration' => 'setRegistration',
        'recurrence' => 'setRecurrence',
        'redirect' => 'setRedirect',
        'button' => 'setButton',
        'selected' => 'setSelected',
        'contract_data' => 'setContractData',
        'form_data' => 'setFormData',
        'i_frame_height' => 'setIFrameHeight',
        'empty_form' => 'setEmptyForm',
        'localized_input_elements' => 'setLocalizedInputElements',
        'routing' => 'setRouting',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'label' => 'getLabel',
        'method' => 'getMethod',
        'grouping' => 'getGrouping',
        'registration' => 'getRegistration',
        'recurrence' => 'getRecurrence',
        'redirect' => 'getRedirect',
        'button' => 'getButton',
        'selected' => 'getSelected',
        'contract_data' => 'getContractData',
        'form_data' => 'getFormData',
        'i_frame_height' => 'getIFrameHeight',
        'empty_form' => 'getEmptyForm',
        'localized_input_elements' => 'getLocalizedInputElements',
        'routing' => 'getRouting',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const METHOD_BANK_TRANSFER = 'BANK_TRANSFER';
    const METHOD_BILLING_PROVIDER = 'BILLING_PROVIDER';
    const METHOD_CASH_ON_DELIVERY = 'CASH_ON_DELIVERY';
    const METHOD_CHECK_PAYMENT = 'CHECK_PAYMENT';
    const METHOD_CREDIT_CARD = 'CREDIT_CARD';
    const METHOD_DEBIT_CARD = 'DEBIT_CARD';
    const METHOD_DIRECT_DEBIT = 'DIRECT_DEBIT';
    const METHOD_ELECTRONIC_INVOICE = 'ELECTRONIC_INVOICE';
    const METHOD_GIFT_CARD = 'GIFT_CARD';
    const METHOD_MOBILE_PAYMENT = 'MOBILE_PAYMENT';
    const METHOD_ONLINE_BANK_TRANSFER = 'ONLINE_BANK_TRANSFER';
    const METHOD_OPEN_INVOICE = 'OPEN_INVOICE';
    const METHOD_PREPAID_CARD = 'PREPAID_CARD';
    const METHOD_TERMINAL = 'TERMINAL';
    const METHOD_WALLET = 'WALLET';
    const REGISTRATION_NONE = 'NONE';
    const REGISTRATION_OPTIONAL = 'OPTIONAL';
    const REGISTRATION_FORCED = 'FORCED';
    const REGISTRATION_OPTIONAL_PRESELECTED = 'OPTIONAL_PRESELECTED';
    const REGISTRATION_FORCED_DISPLAYED = 'FORCED_DISPLAYED';
    const RECURRENCE_NONE = 'NONE';
    const RECURRENCE_OPTIONAL = 'OPTIONAL';
    const RECURRENCE_FORCED = 'FORCED';
    const RECURRENCE_OPTIONAL_PRESELECTED = 'OPTIONAL_PRESELECTED';
    const RECURRENCE_FORCED_DISPLAYED = 'FORCED_DISPLAYED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_BANK_TRANSFER,
            self::METHOD_BILLING_PROVIDER,
            self::METHOD_CASH_ON_DELIVERY,
            self::METHOD_CHECK_PAYMENT,
            self::METHOD_CREDIT_CARD,
            self::METHOD_DEBIT_CARD,
            self::METHOD_DIRECT_DEBIT,
            self::METHOD_ELECTRONIC_INVOICE,
            self::METHOD_GIFT_CARD,
            self::METHOD_MOBILE_PAYMENT,
            self::METHOD_ONLINE_BANK_TRANSFER,
            self::METHOD_OPEN_INVOICE,
            self::METHOD_PREPAID_CARD,
            self::METHOD_TERMINAL,
            self::METHOD_WALLET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegistrationAllowableValues()
    {
        return [
            self::REGISTRATION_NONE,
            self::REGISTRATION_OPTIONAL,
            self::REGISTRATION_FORCED,
            self::REGISTRATION_OPTIONAL_PRESELECTED,
            self::REGISTRATION_FORCED_DISPLAYED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecurrenceAllowableValues()
    {
        return [
            self::RECURRENCE_NONE,
            self::RECURRENCE_OPTIONAL,
            self::RECURRENCE_FORCED,
            self::RECURRENCE_OPTIONAL_PRESELECTED,
            self::RECURRENCE_FORCED_DISPLAYED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['grouping'] = isset($data['grouping']) ? $data['grouping'] : null;
        $this->container['registration'] = isset($data['registration']) ? $data['registration'] : null;
        $this->container['recurrence'] = isset($data['recurrence']) ? $data['recurrence'] : null;
        $this->container['redirect'] = isset($data['redirect']) ? $data['redirect'] : null;
        $this->container['button'] = isset($data['button']) ? $data['button'] : null;
        $this->container['selected'] = isset($data['selected']) ? $data['selected'] : null;
        $this->container['contract_data'] = isset($data['contract_data']) ? $data['contract_data'] : null;
        $this->container['form_data'] = isset($data['form_data']) ? $data['form_data'] : null;
        $this->container['i_frame_height'] = isset($data['i_frame_height']) ? $data['i_frame_height'] : null;
        $this->container['empty_form'] = isset($data['empty_form']) ? $data['empty_form'] : null;
        $this->container['localized_input_elements'] = isset($data['localized_input_elements']) ? $data['localized_input_elements'] : null;
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['grouping'] === null) {
            $invalidProperties[] = "'grouping' can't be null";
        }
        if ($this->container['registration'] === null) {
            $invalidProperties[] = "'registration' can't be null";
        }
        $allowedValues = $this->getRegistrationAllowableValues();
        if (!is_null($this->container['registration']) && !in_array($this->container['registration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'registration', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['recurrence'] === null) {
            $invalidProperties[] = "'recurrence' can't be null";
        }
        $allowedValues = $this->getRecurrenceAllowableValues();
        if (!is_null($this->container['recurrence']) && !in_array($this->container['recurrence'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'recurrence', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['redirect'] === null) {
            $invalidProperties[] = "'redirect' can't be null";
        }
        if ($this->container['links'] === null) {
            $invalidProperties[] = "'links' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Payment network code.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Display label of the payment network.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method Indicates payment method this network belongs to.
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets grouping
     *
     * @return string
     */
    public function getGrouping()
    {
        return $this->container['grouping'];
    }

    /**
     * Sets grouping
     *
     * @param string $grouping Grouping code. Helps to group several payment networks together while displaying them on payment page (e.g. credit cards).
     *
     * @return $this
     */
    public function setGrouping($grouping)
    {
        $this->container['grouping'] = $grouping;

        return $this;
    }

    /**
     * Gets registration
     *
     * @return string
     */
    public function getRegistration()
    {
        return $this->container['registration'];
    }

    /**
     * Sets registration
     *
     * @param string $registration Indicates whether this payment network supports registration and how this should be presented on payment page.
     *
     * @return $this
     */
    public function setRegistration($registration)
    {
        $allowedValues = $this->getRegistrationAllowableValues();
        if (!in_array($registration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'registration', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['registration'] = $registration;

        return $this;
    }

    /**
     * Gets recurrence
     *
     * @return string
     */
    public function getRecurrence()
    {
        return $this->container['recurrence'];
    }

    /**
     * Sets recurrence
     *
     * @param string $recurrence Indicates whether this payment network supports recurring registration and how this should be presented on payment page.
     *
     * @return $this
     */
    public function setRecurrence($recurrence)
    {
        $allowedValues = $this->getRecurrenceAllowableValues();
        if (!in_array($recurrence, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'recurrence', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recurrence'] = $recurrence;

        return $this;
    }

    /**
     * Gets redirect
     *
     * @return bool
     */
    public function getRedirect()
    {
        return $this->container['redirect'];
    }

    /**
     * Sets redirect
     *
     * @param bool $redirect If `true` the payment via this network will result in redirect to the PSP web-site (e.g. PayPal, Sofortüberweisung, etc.).
     *
     * @return $this
     */
    public function setRedirect($redirect)
    {
        $this->container['redirect'] = $redirect;

        return $this;
    }

    /**
     * Gets button
     *
     * @return string
     */
    public function getButton()
    {
        return $this->container['button'];
    }

    /**
     * Sets button
     *
     * @param string $button Code of button-label when this network is selected.
     *
     * @return $this
     */
    public function setButton($button)
    {
        $this->container['button'] = $button;

        return $this;
    }

    /**
     * Gets selected
     *
     * @return bool
     */
    public function getSelected()
    {
        return $this->container['selected'];
    }

    /**
     * Sets selected
     *
     * @param bool $selected If `true` this network should been initially pre-selected.
     *
     * @return $this
     */
    public function setSelected($selected)
    {
        $this->container['selected'] = $selected;

        return $this;
    }

    /**
     * Gets contract_data
     *
     * @return map[string,string]
     */
    public function getContractData()
    {
        return $this->container['contract_data'];
    }

    /**
     * Sets contract_data
     *
     * @param map[string,string] $contract_data Map of public contract attributes (settings that are designed to be exposed, e.g. `button_color`) from the first possible route.
     *
     * @return $this
     */
    public function setContractData($contract_data)
    {
        $this->container['contract_data'] = $contract_data;

        return $this;
    }

    /**
     * Gets form_data
     *
     * @return \Optile\Model\FormData
     */
    public function getFormData()
    {
        return $this->container['form_data'];
    }

    /**
     * Sets form_data
     *
     * @param \Optile\Model\FormData $form_data form_data
     *
     * @return $this
     */
    public function setFormData($form_data)
    {
        $this->container['form_data'] = $form_data;

        return $this;
    }

    /**
     * Gets i_frame_height
     *
     * @return int
     */
    public function getIFrameHeight()
    {
        return $this->container['i_frame_height'];
    }

    /**
     * Sets i_frame_height
     *
     * @param int $i_frame_height IFrame height for selective native, only supplied if \"iFrame\" link is present.
     *
     * @return $this
     */
    public function setIFrameHeight($i_frame_height)
    {
        $this->container['i_frame_height'] = $i_frame_height;

        return $this;
    }

    /**
     * Gets empty_form
     *
     * @return bool
     */
    public function getEmptyForm()
    {
        return $this->container['empty_form'];
    }

    /**
     * Sets empty_form
     *
     * @param bool $empty_form Indicates that form for this network is empty, without any text and input elements.
     *
     * @return $this
     */
    public function setEmptyForm($empty_form)
    {
        $this->container['empty_form'] = $empty_form;

        return $this;
    }

    /**
     * Gets localized_input_elements
     *
     * @return \Optile\Model\InputElement[]
     */
    public function getLocalizedInputElements()
    {
        return $this->container['localized_input_elements'];
    }

    /**
     * Sets localized_input_elements
     *
     * @param \Optile\Model\InputElement[] $localized_input_elements Collection of form input elements. This information is only exposed if merchant indicated `jsonForms` option in the `view` query parameter.
     *
     * @return $this
     */
    public function setLocalizedInputElements($localized_input_elements)
    {
        $this->container['localized_input_elements'] = $localized_input_elements;

        return $this;
    }

    /**
     * Gets routing
     *
     * @return \Optile\Model\Routing
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     *
     * @param \Optile\Model\Routing $routing routing
     *
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Optile\Model\NetworkLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Optile\Model\NetworkLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


