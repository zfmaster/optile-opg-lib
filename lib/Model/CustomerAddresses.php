<?php
/**
 * CustomerAddresses
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * CustomerAddresses Class Doc Comment
 *
 * @category Class
 * @description Customers addresses.  Important for PSP and payment methods with advanced risk management or in countries where AVS is commonly used (e.g. USA). Often an obligatory information for retail merchants. For example, PayPal requires shipping address to be supplied by merchants to qualify for \&quot;merchant protection\&quot; feature.
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerAddresses implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerAddresses';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipping' => '\Optile\Model\Address',
        'billing' => '\Optile\Model\Address',
        'residential' => '\Optile\Model\Address',
        'use_billing_as_shipping_address' => 'bool',
        'additional_addresses' => '\Optile\Model\Address[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipping' => null,
        'billing' => null,
        'residential' => null,
        'use_billing_as_shipping_address' => null,
        'additional_addresses' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping' => 'shipping',
        'billing' => 'billing',
        'residential' => 'residential',
        'use_billing_as_shipping_address' => 'useBillingAsShippingAddress',
        'additional_addresses' => 'additionalAddresses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping' => 'setShipping',
        'billing' => 'setBilling',
        'residential' => 'setResidential',
        'use_billing_as_shipping_address' => 'setUseBillingAsShippingAddress',
        'additional_addresses' => 'setAdditionalAddresses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping' => 'getShipping',
        'billing' => 'getBilling',
        'residential' => 'getResidential',
        'use_billing_as_shipping_address' => 'getUseBillingAsShippingAddress',
        'additional_addresses' => 'getAdditionalAddresses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['billing'] = isset($data['billing']) ? $data['billing'] : null;
        $this->container['residential'] = isset($data['residential']) ? $data['residential'] : null;
        $this->container['use_billing_as_shipping_address'] = isset($data['use_billing_as_shipping_address']) ? $data['use_billing_as_shipping_address'] : null;
        $this->container['additional_addresses'] = isset($data['additional_addresses']) ? $data['additional_addresses'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping
     *
     * @return \Optile\Model\Address
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \Optile\Model\Address $shipping Payment shipping address.
     *
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \Optile\Model\Address
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \Optile\Model\Address $billing Customer billing (payment) address.
     *
     * @return $this
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets residential
     *
     * @return \Optile\Model\Address
     */
    public function getResidential()
    {
        return $this->container['residential'];
    }

    /**
     * Sets residential
     *
     * @param \Optile\Model\Address $residential Customer residential address.
     *
     * @return $this
     */
    public function setResidential($residential)
    {
        $this->container['residential'] = $residential;

        return $this;
    }

    /**
     * Gets use_billing_as_shipping_address
     *
     * @return bool
     */
    public function getUseBillingAsShippingAddress()
    {
        return $this->container['use_billing_as_shipping_address'];
    }

    /**
     * Sets use_billing_as_shipping_address
     *
     * @param bool $use_billing_as_shipping_address If set to `true` and no _shipping_ address is provided the _billing_ address will be used in place of _shipping_ address. By default `false`.
     *
     * @return $this
     */
    public function setUseBillingAsShippingAddress($use_billing_as_shipping_address)
    {
        $this->container['use_billing_as_shipping_address'] = $use_billing_as_shipping_address;

        return $this;
    }

    /**
     * Gets additional_addresses
     *
     * @return \Optile\Model\Address[]
     */
    public function getAdditionalAddresses()
    {
        return $this->container['additional_addresses'];
    }

    /**
     * Sets additional_addresses
     *
     * @param \Optile\Model\Address[] $additional_addresses Collection of additional shipping addresses.
     *
     * @return $this
     */
    public function setAdditionalAddresses($additional_addresses)
    {
        $this->container['additional_addresses'] = $additional_addresses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


