<?php
/**
 * AccountRegistration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * AccountRegistration Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountRegistration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountRegistration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\Optile\Model\AccountLinks',
        'id' => 'string',
        'code' => 'string',
        'label' => 'string',
        'masked_account' => '\Optile\Model\AccountMask',
        'registration' => 'bool',
        'recurrence' => 'bool',
        'last_successful_charge_at' => '\DateTime',
        'selected' => 'bool',
        'i_frame_height' => 'int',
        'preferred_at' => '\DateTime',
        'created_at' => '\DateTime',
        'empty_form' => 'bool',
        'localized_input_elements' => '\Optile\Model\InputElement[]',
        'routing' => '\Optile\Model\Routing',
        'contract_data' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'id' => null,
        'code' => null,
        'label' => null,
        'masked_account' => null,
        'registration' => null,
        'recurrence' => null,
        'last_successful_charge_at' => 'date-time',
        'selected' => null,
        'i_frame_height' => 'int32',
        'preferred_at' => 'date-time',
        'created_at' => 'date-time',
        'empty_form' => null,
        'localized_input_elements' => null,
        'routing' => null,
        'contract_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
        'id' => 'id',
        'code' => 'code',
        'label' => 'label',
        'masked_account' => 'maskedAccount',
        'registration' => 'registration',
        'recurrence' => 'recurrence',
        'last_successful_charge_at' => 'lastSuccessfulChargeAt',
        'selected' => 'selected',
        'i_frame_height' => 'iFrameHeight',
        'preferred_at' => 'preferredAt',
        'created_at' => 'createdAt',
        'empty_form' => 'emptyForm',
        'localized_input_elements' => 'localizedInputElements',
        'routing' => 'routing',
        'contract_data' => 'contractData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'id' => 'setId',
        'code' => 'setCode',
        'label' => 'setLabel',
        'masked_account' => 'setMaskedAccount',
        'registration' => 'setRegistration',
        'recurrence' => 'setRecurrence',
        'last_successful_charge_at' => 'setLastSuccessfulChargeAt',
        'selected' => 'setSelected',
        'i_frame_height' => 'setIFrameHeight',
        'preferred_at' => 'setPreferredAt',
        'created_at' => 'setCreatedAt',
        'empty_form' => 'setEmptyForm',
        'localized_input_elements' => 'setLocalizedInputElements',
        'routing' => 'setRouting',
        'contract_data' => 'setContractData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'id' => 'getId',
        'code' => 'getCode',
        'label' => 'getLabel',
        'masked_account' => 'getMaskedAccount',
        'registration' => 'getRegistration',
        'recurrence' => 'getRecurrence',
        'last_successful_charge_at' => 'getLastSuccessfulChargeAt',
        'selected' => 'getSelected',
        'i_frame_height' => 'getIFrameHeight',
        'preferred_at' => 'getPreferredAt',
        'created_at' => 'getCreatedAt',
        'empty_form' => 'getEmptyForm',
        'localized_input_elements' => 'getLocalizedInputElements',
        'routing' => 'getRouting',
        'contract_data' => 'getContractData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['masked_account'] = isset($data['masked_account']) ? $data['masked_account'] : null;
        $this->container['registration'] = isset($data['registration']) ? $data['registration'] : null;
        $this->container['recurrence'] = isset($data['recurrence']) ? $data['recurrence'] : null;
        $this->container['last_successful_charge_at'] = isset($data['last_successful_charge_at']) ? $data['last_successful_charge_at'] : null;
        $this->container['selected'] = isset($data['selected']) ? $data['selected'] : null;
        $this->container['i_frame_height'] = isset($data['i_frame_height']) ? $data['i_frame_height'] : null;
        $this->container['preferred_at'] = isset($data['preferred_at']) ? $data['preferred_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['empty_form'] = isset($data['empty_form']) ? $data['empty_form'] : null;
        $this->container['localized_input_elements'] = isset($data['localized_input_elements']) ? $data['localized_input_elements'] : null;
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['contract_data'] = isset($data['contract_data']) ? $data['contract_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['links'] === null) {
            $invalidProperties[] = "'links' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ($this->container['masked_account'] === null) {
            $invalidProperties[] = "'masked_account' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \Optile\Model\AccountLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Optile\Model\AccountLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of this registered account.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Payment network code of the registration.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Display label of the payment network for this registration.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets masked_account
     *
     * @return \Optile\Model\AccountMask
     */
    public function getMaskedAccount()
    {
        return $this->container['masked_account'];
    }

    /**
     * Sets masked_account
     *
     * @param \Optile\Model\AccountMask $masked_account masked_account
     *
     * @return $this
     */
    public function setMaskedAccount($masked_account)
    {
        $this->container['masked_account'] = $masked_account;

        return $this;
    }

    /**
     * Gets registration
     *
     * @return bool
     */
    public function getRegistration()
    {
        return $this->container['registration'];
    }

    /**
     * Sets registration
     *
     * @param bool $registration Indicates that this account has at least one active one-click payment service provider registration.
     *
     * @return $this
     */
    public function setRegistration($registration)
    {
        $this->container['registration'] = $registration;

        return $this;
    }

    /**
     * Gets recurrence
     *
     * @return bool
     */
    public function getRecurrence()
    {
        return $this->container['recurrence'];
    }

    /**
     * Sets recurrence
     *
     * @param bool $recurrence Indicates that this account has at least one active registration payment service provider registration.
     *
     * @return $this
     */
    public function setRecurrence($recurrence)
    {
        $this->container['recurrence'] = $recurrence;

        return $this;
    }

    /**
     * Gets last_successful_charge_at
     *
     * @return \DateTime
     */
    public function getLastSuccessfulChargeAt()
    {
        return $this->container['last_successful_charge_at'];
    }

    /**
     * Sets last_successful_charge_at
     *
     * @param \DateTime $last_successful_charge_at Time stamp of last successful `CHARGE` operation performed with this account.
     *
     * @return $this
     */
    public function setLastSuccessfulChargeAt($last_successful_charge_at)
    {
        $this->container['last_successful_charge_at'] = $last_successful_charge_at;

        return $this;
    }

    /**
     * Gets selected
     *
     * @return bool
     */
    public function getSelected()
    {
        return $this->container['selected'];
    }

    /**
     * Sets selected
     *
     * @param bool $selected Indicates that this account registration is initially selected.
     *
     * @return $this
     */
    public function setSelected($selected)
    {
        $this->container['selected'] = $selected;

        return $this;
    }

    /**
     * Gets i_frame_height
     *
     * @return int
     */
    public function getIFrameHeight()
    {
        return $this->container['i_frame_height'];
    }

    /**
     * Sets i_frame_height
     *
     * @param int $i_frame_height IFrame height for selective native, only supplied if \"iFrame\" link is present.
     *
     * @return $this
     */
    public function setIFrameHeight($i_frame_height)
    {
        $this->container['i_frame_height'] = $i_frame_height;

        return $this;
    }

    /**
     * Gets preferred_at
     *
     * @return \DateTime
     */
    public function getPreferredAt()
    {
        return $this->container['preferred_at'];
    }

    /**
     * Sets preferred_at
     *
     * @param \DateTime $preferred_at Timestamp when this account was marked as preferred.
     *
     * @return $this
     */
    public function setPreferredAt($preferred_at)
    {
        $this->container['preferred_at'] = $preferred_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Timestamp when this account was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets empty_form
     *
     * @return bool
     */
    public function getEmptyForm()
    {
        return $this->container['empty_form'];
    }

    /**
     * Sets empty_form
     *
     * @param bool $empty_form Indicates that form for this account is empty, without any text and input elements.
     *
     * @return $this
     */
    public function setEmptyForm($empty_form)
    {
        $this->container['empty_form'] = $empty_form;

        return $this;
    }

    /**
     * Gets localized_input_elements
     *
     * @return \Optile\Model\InputElement[]
     */
    public function getLocalizedInputElements()
    {
        return $this->container['localized_input_elements'];
    }

    /**
     * Sets localized_input_elements
     *
     * @param \Optile\Model\InputElement[] $localized_input_elements Collection of form input elements. This information is only exposed if merchant indicated `jsonForms` option in the `view` query parameter.
     *
     * @return $this
     */
    public function setLocalizedInputElements($localized_input_elements)
    {
        $this->container['localized_input_elements'] = $localized_input_elements;

        return $this;
    }

    /**
     * Gets routing
     *
     * @return \Optile\Model\Routing
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     *
     * @param \Optile\Model\Routing $routing routing
     *
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets contract_data
     *
     * @return map[string,string]
     */
    public function getContractData()
    {
        return $this->container['contract_data'];
    }

    /**
     * Sets contract_data
     *
     * @param map[string,string] $contract_data Map of public contract attributes (settings that are designed to be exposed, e.g. `button_color`) from the first possible route.
     *
     * @return $this
     */
    public function setContractData($contract_data)
    {
        $this->container['contract_data'] = $contract_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


