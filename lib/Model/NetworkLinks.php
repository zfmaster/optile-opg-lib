<?php
/**
 * NetworkLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * NetworkLinks Class Doc Comment
 *
 * @category Class
 * @description Collection of links to build the account form for this payment network and perform different actions with entered account.
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworkLinks implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NetworkLinks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'self' => 'string',
        'operation' => 'string',
        'validation' => 'string',
        'logo' => 'string',
        'form' => 'string',
        'localized_form' => 'string',
        'preload_form' => 'string',
        'lang' => 'string',
        'i_frame' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'self' => 'uri',
        'operation' => 'uri',
        'validation' => 'uri',
        'logo' => 'uri',
        'form' => 'uri',
        'localized_form' => 'uri',
        'preload_form' => 'uri',
        'lang' => 'uri',
        'i_frame' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'self' => 'self',
        'operation' => 'operation',
        'validation' => 'validation',
        'logo' => 'logo',
        'form' => 'form',
        'localized_form' => 'localizedForm',
        'preload_form' => 'preloadForm',
        'lang' => 'lang',
        'i_frame' => 'iFrame'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'self' => 'setSelf',
        'operation' => 'setOperation',
        'validation' => 'setValidation',
        'logo' => 'setLogo',
        'form' => 'setForm',
        'localized_form' => 'setLocalizedForm',
        'preload_form' => 'setPreloadForm',
        'lang' => 'setLang',
        'i_frame' => 'setIFrame'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'self' => 'getSelf',
        'operation' => 'getOperation',
        'validation' => 'getValidation',
        'logo' => 'getLogo',
        'form' => 'getForm',
        'localized_form' => 'getLocalizedForm',
        'preload_form' => 'getPreloadForm',
        'lang' => 'getLang',
        'i_frame' => 'getIFrame'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['self'] = isset($data['self']) ? $data['self'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['validation'] = isset($data['validation']) ? $data['validation'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['form'] = isset($data['form']) ? $data['form'] : null;
        $this->container['localized_form'] = isset($data['localized_form']) ? $data['localized_form'] : null;
        $this->container['preload_form'] = isset($data['preload_form']) ? $data['preload_form'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['i_frame'] = isset($data['i_frame']) ? $data['i_frame'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['self'] === null) {
            $invalidProperties[] = "'self' can't be null";
        }
        if ($this->container['logo'] === null) {
            $invalidProperties[] = "'logo' can't be null";
        }
        if ($this->container['lang'] === null) {
            $invalidProperties[] = "'lang' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets self
     *
     * @return string
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string $self URL to retrieve details about this payment network in context of initialized `LIST`.
     *
     * @return $this
     */
    public function setSelf($self)
    {
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation URL where operation data should be submitted (POSTed), if customer has decided to pay with this payment network.
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return string
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param string $validation URL to submit account for in-page validation if supported.
     *
     * @return $this
     */
    public function setValidation($validation)
    {
        $this->container['validation'] = $validation;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo URL of this payment network logo (image).
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets form
     *
     * @return string
     */
    public function getForm()
    {
        return $this->container['form'];
    }

    /**
     * Sets form
     *
     * @param string $form URL to retrieve an account form template. template is an HTML snippet with account elements and message placeholders.
     *
     * @return $this
     */
    public function setForm($form)
    {
        $this->container['form'] = $form;

        return $this;
    }

    /**
     * Gets localized_form
     *
     * @return string
     */
    public function getLocalizedForm()
    {
        return $this->container['localized_form'];
    }

    /**
     * Sets localized_form
     *
     * @param string $localized_form URL to retrieve localized representation of account form. Text placeholders are replaced by text in corresponding language, language is defined by `LIST` session.
     *
     * @return $this
     */
    public function setLocalizedForm($localized_form)
    {
        $this->container['localized_form'] = $localized_form;

        return $this;
    }

    /**
     * Gets preload_form
     *
     * @return string
     */
    public function getPreloadForm()
    {
        return $this->container['preload_form'];
    }

    /**
     * Sets preload_form
     *
     * @param string $preload_form If present, this URL points to the form for this payment network that has to be preloaded and initialised prior the rendering of this `LIST` session on the client side. Main goal is to accelerate rendering of the main form for this payment network.
     *
     * @return $this
     */
    public function setPreloadForm($preload_form)
    {
        $this->container['preload_form'] = $preload_form;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang URL of language file that contains labels and messages to localize account forms and display errors for this payment network. Language file is provided in [Java properties](http://en.wikipedia.org/wiki/.properties) format.
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets i_frame
     *
     * @return string
     */
    public function getIFrame()
    {
        return $this->container['i_frame'];
    }

    /**
     * Sets i_frame
     *
     * @param string $i_frame URL of iFrame what should been shown to the customer to collect account data. Present only in the case when `LIST` session was initialized with `SELECTIVE_NATIVE` integration type.
     *
     * @return $this
     */
    public function setIFrame($i_frame)
    {
        $this->container['i_frame'] = $i_frame;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


