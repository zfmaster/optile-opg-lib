<?php
/**
 * RecurringTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * RecurringTransaction Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecurringTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecurringTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_id' => 'string',
        'country' => 'string',
        'channel' => 'string',
        'division' => 'string',
        'callback' => '\Optile\Model\RecurringCallback',
        'customer' => '\Optile\Model\Customer',
        'client_info' => '\Optile\Model\ClientInfo',
        'payment' => '\Optile\Model\Payment',
        'products' => '\Optile\Model\Product[]',
        'style' => '\Optile\Model\Style',
        'preselection' => '\Optile\Model\RecurringPreselection',
        'mandate' => '\Optile\Model\Mandate',
        'installment' => '\Optile\Model\Installment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_id' => null,
        'country' => null,
        'channel' => null,
        'division' => null,
        'callback' => null,
        'customer' => null,
        'client_info' => null,
        'payment' => null,
        'products' => null,
        'style' => null,
        'preselection' => null,
        'mandate' => null,
        'installment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transactionId',
        'country' => 'country',
        'channel' => 'channel',
        'division' => 'division',
        'callback' => 'callback',
        'customer' => 'customer',
        'client_info' => 'clientInfo',
        'payment' => 'payment',
        'products' => 'products',
        'style' => 'style',
        'preselection' => 'preselection',
        'mandate' => 'mandate',
        'installment' => 'installment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
        'country' => 'setCountry',
        'channel' => 'setChannel',
        'division' => 'setDivision',
        'callback' => 'setCallback',
        'customer' => 'setCustomer',
        'client_info' => 'setClientInfo',
        'payment' => 'setPayment',
        'products' => 'setProducts',
        'style' => 'setStyle',
        'preselection' => 'setPreselection',
        'mandate' => 'setMandate',
        'installment' => 'setInstallment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
        'country' => 'getCountry',
        'channel' => 'getChannel',
        'division' => 'getDivision',
        'callback' => 'getCallback',
        'customer' => 'getCustomer',
        'client_info' => 'getClientInfo',
        'payment' => 'getPayment',
        'products' => 'getProducts',
        'style' => 'getStyle',
        'preselection' => 'getPreselection',
        'mandate' => 'getMandate',
        'installment' => 'getInstallment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHANNEL_WEB_ORDER = 'WEB_ORDER';
    const CHANNEL_MOBILE_ORDER = 'MOBILE_ORDER';
    const CHANNEL_CUSTOMER_SELF_SERVICE = 'CUSTOMER_SELF_SERVICE';
    const CHANNEL_EMAIL_ORDER = 'EMAIL_ORDER';
    const CHANNEL_CALLCENTER_ORDER = 'CALLCENTER_ORDER';
    const CHANNEL_MAIL_ORDER = 'MAIL_ORDER';
    const CHANNEL_TERMINAL_ORDER = 'TERMINAL_ORDER';
    const CHANNEL_CUSTOMER_SUPPORT = 'CUSTOMER_SUPPORT';
    const CHANNEL_RECURRING = 'RECURRING';
    const CHANNEL_DUNNING = 'DUNNING';
    const CHANNEL_FULFILLMENT = 'FULFILLMENT';
    const CHANNEL_IMPORT = 'IMPORT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_WEB_ORDER,
            self::CHANNEL_MOBILE_ORDER,
            self::CHANNEL_CUSTOMER_SELF_SERVICE,
            self::CHANNEL_EMAIL_ORDER,
            self::CHANNEL_CALLCENTER_ORDER,
            self::CHANNEL_MAIL_ORDER,
            self::CHANNEL_TERMINAL_ORDER,
            self::CHANNEL_CUSTOMER_SUPPORT,
            self::CHANNEL_RECURRING,
            self::CHANNEL_DUNNING,
            self::CHANNEL_FULFILLMENT,
            self::CHANNEL_IMPORT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['callback'] = isset($data['callback']) ? $data['callback'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['client_info'] = isset($data['client_info']) ? $data['client_info'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['preselection'] = isset($data['preselection']) ? $data['preselection'] : null;
        $this->container['mandate'] = isset($data['mandate']) ? $data['mandate'] : null;
        $this->container['installment'] = isset($data['installment']) ? $data['installment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'channel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment'] === null) {
            $invalidProperties[] = "'payment' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Identifier for this payment transaction given by the merchant. It is not validated for uniqueness by OPG, but may be checked for by some PSPs, thus recommended to be unique.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country where the payment is originating. This influences the choice of the available payment networks. Value format is according to ISO 3166-1 (alpha-2), e.g. \"DE\", \"FR\", \"US\", \"GB\", etc.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel Indicates where the payment request comes from. For example, from a website, from a mobile device, or it is a recurring transaction from the merchant's backend.  By default `RECURRING` for this type of transactions.
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($channel) && !in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string $division Division name of this transaction.  Merchant can configure multiple divisions via Merchant Configuration API or portal. But there is always one _default division_ that will be used if this property is undefined. Different divisions can be configured with different setup, contracts, payment routes and network options.
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets callback
     *
     * @return \Optile\Model\RecurringCallback
     */
    public function getCallback()
    {
        return $this->container['callback'];
    }

    /**
     * Sets callback
     *
     * @param \Optile\Model\RecurringCallback $callback callback
     *
     * @return $this
     */
    public function setCallback($callback)
    {
        $this->container['callback'] = $callback;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Optile\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Optile\Model\Customer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets client_info
     *
     * @return \Optile\Model\ClientInfo
     */
    public function getClientInfo()
    {
        return $this->container['client_info'];
    }

    /**
     * Sets client_info
     *
     * @param \Optile\Model\ClientInfo $client_info Information about customers client (web browser, mobile device, etc.)  **Deprecated!** This information is not expected during recurring charge and should not be supplied.
     *
     * @return $this
     */
    public function setClientInfo($client_info)
    {
        $this->container['client_info'] = $client_info;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Optile\Model\Payment
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Optile\Model\Payment $payment payment
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Optile\Model\Product[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Optile\Model\Product[] $products Products (shopping cart) information.
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets style
     *
     * @return \Optile\Model\Style
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param \Optile\Model\Style $style Default appearance of payment page can be overwritten with these style parameters.  **Deprecated!** This information is not expected during recurring charge and will be ignored.
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets preselection
     *
     * @return \Optile\Model\RecurringPreselection
     */
    public function getPreselection()
    {
        return $this->container['preselection'];
    }

    /**
     * Sets preselection
     *
     * @param \Optile\Model\RecurringPreselection $preselection preselection
     *
     * @return $this
     */
    public function setPreselection($preselection)
    {
        $this->container['preselection'] = $preselection;

        return $this;
    }

    /**
     * Gets mandate
     *
     * @return \Optile\Model\Mandate
     */
    public function getMandate()
    {
        return $this->container['mandate'];
    }

    /**
     * Sets mandate
     *
     * @param \Optile\Model\Mandate $mandate mandate
     *
     * @return $this
     */
    public function setMandate($mandate)
    {
        $this->container['mandate'] = $mandate;

        return $this;
    }

    /**
     * Gets installment
     *
     * @return \Optile\Model\Installment
     */
    public function getInstallment()
    {
        return $this->container['installment'];
    }

    /**
     * Sets installment
     *
     * @param \Optile\Model\Installment $installment installment
     *
     * @return $this
     */
    public function setInstallment($installment)
    {
        $this->container['installment'] = $installment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


