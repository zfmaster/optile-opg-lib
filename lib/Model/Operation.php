<?php
/**
 * Operation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * Operation Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Operation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Operation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_id' => 'string',
        'auto_registration' => 'bool',
        'allow_recurrence' => 'bool',
        'account' => '\Optile\Model\AccountInputData',
        'encrypted_account' => 'string',
        'client_info' => '\Optile\Model\ClientInfo',
        'payment' => '\Optile\Model\Payment',
        'products' => '\Optile\Model\Product[]',
        'checkboxes' => 'map[string,bool]',
        'mandate' => '\Optile\Model\Mandate',
        'installment' => '\Optile\Model\Installment',
        'routes' => '\Optile\Model\Route[]',
        'final_operation' => 'bool',
        'provider_request' => '\Optile\Model\ProviderParameters',
        'preselection' => '\Optile\Model\OperationPreselection',
        'risk_data' => '\Optile\Model\RiskData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_id' => null,
        'auto_registration' => null,
        'allow_recurrence' => null,
        'account' => null,
        'encrypted_account' => null,
        'client_info' => null,
        'payment' => null,
        'products' => null,
        'checkboxes' => null,
        'mandate' => null,
        'installment' => null,
        'routes' => null,
        'final_operation' => null,
        'provider_request' => null,
        'preselection' => null,
        'risk_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transactionId',
        'auto_registration' => 'autoRegistration',
        'allow_recurrence' => 'allowRecurrence',
        'account' => 'account',
        'encrypted_account' => 'encryptedAccount',
        'client_info' => 'clientInfo',
        'payment' => 'payment',
        'products' => 'products',
        'checkboxes' => 'checkboxes',
        'mandate' => 'mandate',
        'installment' => 'installment',
        'routes' => 'routes',
        'final_operation' => 'finalOperation',
        'provider_request' => 'providerRequest',
        'preselection' => 'preselection',
        'risk_data' => 'riskData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
        'auto_registration' => 'setAutoRegistration',
        'allow_recurrence' => 'setAllowRecurrence',
        'account' => 'setAccount',
        'encrypted_account' => 'setEncryptedAccount',
        'client_info' => 'setClientInfo',
        'payment' => 'setPayment',
        'products' => 'setProducts',
        'checkboxes' => 'setCheckboxes',
        'mandate' => 'setMandate',
        'installment' => 'setInstallment',
        'routes' => 'setRoutes',
        'final_operation' => 'setFinalOperation',
        'provider_request' => 'setProviderRequest',
        'preselection' => 'setPreselection',
        'risk_data' => 'setRiskData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
        'auto_registration' => 'getAutoRegistration',
        'allow_recurrence' => 'getAllowRecurrence',
        'account' => 'getAccount',
        'encrypted_account' => 'getEncryptedAccount',
        'client_info' => 'getClientInfo',
        'payment' => 'getPayment',
        'products' => 'getProducts',
        'checkboxes' => 'getCheckboxes',
        'mandate' => 'getMandate',
        'installment' => 'getInstallment',
        'routes' => 'getRoutes',
        'final_operation' => 'getFinalOperation',
        'provider_request' => 'getProviderRequest',
        'preselection' => 'getPreselection',
        'risk_data' => 'getRiskData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['auto_registration'] = isset($data['auto_registration']) ? $data['auto_registration'] : null;
        $this->container['allow_recurrence'] = isset($data['allow_recurrence']) ? $data['allow_recurrence'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['encrypted_account'] = isset($data['encrypted_account']) ? $data['encrypted_account'] : null;
        $this->container['client_info'] = isset($data['client_info']) ? $data['client_info'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['checkboxes'] = isset($data['checkboxes']) ? $data['checkboxes'] : null;
        $this->container['mandate'] = isset($data['mandate']) ? $data['mandate'] : null;
        $this->container['installment'] = isset($data['installment']) ? $data['installment'] : null;
        $this->container['routes'] = isset($data['routes']) ? $data['routes'] : null;
        $this->container['final_operation'] = isset($data['final_operation']) ? $data['final_operation'] : null;
        $this->container['provider_request'] = isset($data['provider_request']) ? $data['provider_request'] : null;
        $this->container['preselection'] = isset($data['preselection']) ? $data['preselection'] : null;
        $this->container['risk_data'] = isset($data['risk_data']) ? $data['risk_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Merchant transaction ID assigned to this operation (payment step).  Note: This value is optional and if it is not set the `transactionId` from referred operation (e.g. `LIST`) will be used during processing.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets auto_registration
     *
     * @return bool
     */
    public function getAutoRegistration()
    {
        return $this->container['auto_registration'];
    }

    /**
     * Sets auto_registration
     *
     * @param bool $auto_registration If set to `true` the account will be registered for further payments.
     *
     * @return $this
     */
    public function setAutoRegistration($auto_registration)
    {
        $this->container['auto_registration'] = $auto_registration;

        return $this;
    }

    /**
     * Gets allow_recurrence
     *
     * @return bool
     */
    public function getAllowRecurrence()
    {
        return $this->container['allow_recurrence'];
    }

    /**
     * Sets allow_recurrence
     *
     * @param bool $allow_recurrence If set to `true` the account will be registered for further recurring payments.
     *
     * @return $this
     */
    public function setAllowRecurrence($allow_recurrence)
    {
        $this->container['allow_recurrence'] = $allow_recurrence;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Optile\Model\AccountInputData
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Optile\Model\AccountInputData $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets encrypted_account
     *
     * @return string
     */
    public function getEncryptedAccount()
    {
        return $this->container['encrypted_account'];
    }

    /**
     * Sets encrypted_account
     *
     * @param string $encrypted_account Customer account data encrypted with one of the CSE (Client Side Encryption) keys configured in MCAPI for division of this transaction. Account data should be encrypted according to [JOSE standard](https://tools.ietf.org/html/rfc7520) \"RSA-OAEP\" + \"A256GCM\", see [RFC-7520](https://tools.ietf.org/html/rfc7520#section-5.2).  Note that supplying both fields `account` and  `encryptedAccount` will cause an error and such operation will be rejected.  See [Client Side Encryption](https://www.optile.io/opg#894746) for further details.
     *
     * @return $this
     */
    public function setEncryptedAccount($encrypted_account)
    {
        $this->container['encrypted_account'] = $encrypted_account;

        return $this;
    }

    /**
     * Gets client_info
     *
     * @return \Optile\Model\ClientInfo
     */
    public function getClientInfo()
    {
        return $this->container['client_info'];
    }

    /**
     * Sets client_info
     *
     * @param \Optile\Model\ClientInfo $client_info Information about customers client (web browser, mobile device, etc.). If defined this will override information provided during `LIST` initialization.
     *
     * @return $this
     */
    public function setClientInfo($client_info)
    {
        $this->container['client_info'] = $client_info;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Optile\Model\Payment
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Optile\Model\Payment $payment Payment information. If defined this will override information provided during `LIST` initialization.
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Optile\Model\Product[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Optile\Model\Product[] $products Products (shopping cart) information. If defined this will override information provided during `LIST` initialization.
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets checkboxes
     *
     * @return map[string,bool]
     */
    public function getCheckboxes()
    {
        return $this->container['checkboxes'];
    }

    /**
     * Sets checkboxes
     *
     * @param map[string,bool] $checkboxes Map of selected checkboxes. Name reflects the checkbox distinguish name, value reflects its state - `true` for checked, `false` for unchecked.
     *
     * @return $this
     */
    public function setCheckboxes($checkboxes)
    {
        $this->container['checkboxes'] = $checkboxes;

        return $this;
    }

    /**
     * Gets mandate
     *
     * @return \Optile\Model\Mandate
     */
    public function getMandate()
    {
        return $this->container['mandate'];
    }

    /**
     * Sets mandate
     *
     * @param \Optile\Model\Mandate $mandate mandate
     *
     * @return $this
     */
    public function setMandate($mandate)
    {
        $this->container['mandate'] = $mandate;

        return $this;
    }

    /**
     * Gets installment
     *
     * @return \Optile\Model\Installment
     */
    public function getInstallment()
    {
        return $this->container['installment'];
    }

    /**
     * Sets installment
     *
     * @param \Optile\Model\Installment $installment installment
     *
     * @return $this
     */
    public function setInstallment($installment)
    {
        $this->container['installment'] = $installment;

        return $this;
    }

    /**
     * Gets routes
     *
     * @return \Optile\Model\Route[]
     */
    public function getRoutes()
    {
        return $this->container['routes'];
    }

    /**
     * Sets routes
     *
     * @param \Optile\Model\Route[] $routes List of payment routes for this operation. Reflects the merchant decision to override the routing proposed by system in `LIST`. Routes are sorted in the preferred order.  Note: this list may only contain routes that were available in the referred `LIST` for selected payment network or account.
     *
     * @return $this
     */
    public function setRoutes($routes)
    {
        $this->container['routes'] = $routes;

        return $this;
    }

    /**
     * Gets final_operation
     *
     * @return bool
     */
    public function getFinalOperation()
    {
        return $this->container['final_operation'];
    }

    /**
     * Sets final_operation
     *
     * @param bool $final_operation Indicates that this is a final operation of this kind: final capture, update or refund and no future actions are expected.
     *
     * @return $this
     */
    public function setFinalOperation($final_operation)
    {
        $this->container['final_operation'] = $final_operation;

        return $this;
    }

    /**
     * Gets provider_request
     *
     * @return \Optile\Model\ProviderParameters
     */
    public function getProviderRequest()
    {
        return $this->container['provider_request'];
    }

    /**
     * Sets provider_request
     *
     * @param \Optile\Model\ProviderParameters $provider_request Provider request parameters that should be passed to the target payment provider adapter to complete the operation.
     *
     * @return $this
     */
    public function setProviderRequest($provider_request)
    {
        $this->container['provider_request'] = $provider_request;

        return $this;
    }

    /**
     * Gets preselection
     *
     * @return \Optile\Model\OperationPreselection
     */
    public function getPreselection()
    {
        return $this->container['preselection'];
    }

    /**
     * Sets preselection
     *
     * @param \Optile\Model\OperationPreselection $preselection preselection
     *
     * @return $this
     */
    public function setPreselection($preselection)
    {
        $this->container['preselection'] = $preselection;

        return $this;
    }

    /**
     * Gets risk_data
     *
     * @return \Optile\Model\RiskData
     */
    public function getRiskData()
    {
        return $this->container['risk_data'];
    }

    /**
     * Sets risk_data
     *
     * @param \Optile\Model\RiskData $risk_data risk_data
     *
     * @return $this
     */
    public function setRiskData($risk_data)
    {
        $this->container['risk_data'] = $risk_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


