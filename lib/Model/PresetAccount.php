<?php
/**
 * PresetAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * PresetAccount Class Doc Comment
 *
 * @category Class
 * @description Information about preset network or account in scope of this &#x60;LIST&#x60; session. This property is only present in &#x60;LIST&#x60; session created with &#x60;presetFirst&#x60; option.
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PresetAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PresetAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => '\Optile\Model\PresetLinks',
        'code' => 'string',
        'masked_account' => '\Optile\Model\AccountMask',
        'empty_form' => 'bool',
        'button' => 'string',
        'redirect' => '\Optile\Model\Redirect',
        'contract_data' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
        'code' => null,
        'masked_account' => null,
        'empty_form' => null,
        'button' => null,
        'redirect' => null,
        'contract_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
        'code' => 'code',
        'masked_account' => 'maskedAccount',
        'empty_form' => 'emptyForm',
        'button' => 'button',
        'redirect' => 'redirect',
        'contract_data' => 'contractData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'code' => 'setCode',
        'masked_account' => 'setMaskedAccount',
        'empty_form' => 'setEmptyForm',
        'button' => 'setButton',
        'redirect' => 'setRedirect',
        'contract_data' => 'setContractData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'code' => 'getCode',
        'masked_account' => 'getMaskedAccount',
        'empty_form' => 'getEmptyForm',
        'button' => 'getButton',
        'redirect' => 'getRedirect',
        'contract_data' => 'getContractData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['masked_account'] = isset($data['masked_account']) ? $data['masked_account'] : null;
        $this->container['empty_form'] = isset($data['empty_form']) ? $data['empty_form'] : null;
        $this->container['button'] = isset($data['button']) ? $data['button'] : null;
        $this->container['redirect'] = isset($data['redirect']) ? $data['redirect'] : null;
        $this->container['contract_data'] = isset($data['contract_data']) ? $data['contract_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['links'] === null) {
            $invalidProperties[] = "'links' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['empty_form'] === null) {
            $invalidProperties[] = "'empty_form' can't be null";
        }
        if ($this->container['button'] === null) {
            $invalidProperties[] = "'button' can't be null";
        }
        if ($this->container['redirect'] === null) {
            $invalidProperties[] = "'redirect' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return \Optile\Model\PresetLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Optile\Model\PresetLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The code of preset payment network.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets masked_account
     *
     * @return \Optile\Model\AccountMask
     */
    public function getMaskedAccount()
    {
        return $this->container['masked_account'];
    }

    /**
     * Sets masked_account
     *
     * @param \Optile\Model\AccountMask $masked_account masked_account
     *
     * @return $this
     */
    public function setMaskedAccount($masked_account)
    {
        $this->container['masked_account'] = $masked_account;

        return $this;
    }

    /**
     * Gets empty_form
     *
     * @return bool
     */
    public function getEmptyForm()
    {
        return $this->container['empty_form'];
    }

    /**
     * Sets empty_form
     *
     * @param bool $empty_form Indicates that form for this account is empty, without any text and input elements.
     *
     * @return $this
     */
    public function setEmptyForm($empty_form)
    {
        $this->container['empty_form'] = $empty_form;

        return $this;
    }

    /**
     * Gets button
     *
     * @return string
     */
    public function getButton()
    {
        return $this->container['button'];
    }

    /**
     * Sets button
     *
     * @param string $button Code of button-label for this preset account.
     *
     * @return $this
     */
    public function setButton($button)
    {
        $this->container['button'] = $button;

        return $this;
    }

    /**
     * Gets redirect
     *
     * @return \Optile\Model\Redirect
     */
    public function getRedirect()
    {
        return $this->container['redirect'];
    }

    /**
     * Sets redirect
     *
     * @param \Optile\Model\Redirect $redirect Describes redirect to summary page of merchants web-site.
     *
     * @return $this
     */
    public function setRedirect($redirect)
    {
        $this->container['redirect'] = $redirect;

        return $this;
    }

    /**
     * Gets contract_data
     *
     * @return map[string,string]
     */
    public function getContractData()
    {
        return $this->container['contract_data'];
    }

    /**
     * Sets contract_data
     *
     * @param map[string,string] $contract_data Map of public contract attributes (settings that are designed to be exposed, e.g. `button_color`) from the first possible route.
     *
     * @return $this
     */
    public function setContractData($contract_data)
    {
        $this->container['contract_data'] = $contract_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


