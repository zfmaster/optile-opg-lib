<?php
/**
 * ExpressOperation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * ExpressOperation Class Doc Comment
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExpressOperation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExpressOperation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_id' => 'string',
        'client_info' => '\Optile\Model\ClientInfo',
        'payment' => '\Optile\Model\Payment',
        'products' => '\Optile\Model\Product[]',
        'preselection' => '\Optile\Model\RecurringPreselection',
        'checkboxes' => 'map[string,bool]',
        'final_operation' => 'bool',
        'provider_request' => '\Optile\Model\ProviderParameters'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_id' => null,
        'client_info' => null,
        'payment' => null,
        'products' => null,
        'preselection' => null,
        'checkboxes' => null,
        'final_operation' => null,
        'provider_request' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transactionId',
        'client_info' => 'clientInfo',
        'payment' => 'payment',
        'products' => 'products',
        'preselection' => 'preselection',
        'checkboxes' => 'checkboxes',
        'final_operation' => 'finalOperation',
        'provider_request' => 'providerRequest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
        'client_info' => 'setClientInfo',
        'payment' => 'setPayment',
        'products' => 'setProducts',
        'preselection' => 'setPreselection',
        'checkboxes' => 'setCheckboxes',
        'final_operation' => 'setFinalOperation',
        'provider_request' => 'setProviderRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
        'client_info' => 'getClientInfo',
        'payment' => 'getPayment',
        'products' => 'getProducts',
        'preselection' => 'getPreselection',
        'checkboxes' => 'getCheckboxes',
        'final_operation' => 'getFinalOperation',
        'provider_request' => 'getProviderRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['client_info'] = isset($data['client_info']) ? $data['client_info'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['preselection'] = isset($data['preselection']) ? $data['preselection'] : null;
        $this->container['checkboxes'] = isset($data['checkboxes']) ? $data['checkboxes'] : null;
        $this->container['final_operation'] = isset($data['final_operation']) ? $data['final_operation'] : null;
        $this->container['provider_request'] = isset($data['provider_request']) ? $data['provider_request'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Merchant transaction ID assigned to this express operation during payment step.  Note: This value is optional and if it is not set the `transactionId` from referred operation (`EXPRESSPRESET`) will be used during processing.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets client_info
     *
     * @return \Optile\Model\ClientInfo
     */
    public function getClientInfo()
    {
        return $this->container['client_info'];
    }

    /**
     * Sets client_info
     *
     * @param \Optile\Model\ClientInfo $client_info Information about customers client (web browser, mobile device, etc.). If defined this will override information provided during `EXPRESSPRESET` initialization.
     *
     * @return $this
     */
    public function setClientInfo($client_info)
    {
        $this->container['client_info'] = $client_info;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Optile\Model\Payment
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Optile\Model\Payment $payment Payment information. If defined this will override information provided during `EXPRESSPRESET` initialization.
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Optile\Model\Product[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Optile\Model\Product[] $products Products (shopping cart) information. If defined this will override information provided during `EXPRESSPRESET` initialization.
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets preselection
     *
     * @return \Optile\Model\RecurringPreselection
     */
    public function getPreselection()
    {
        return $this->container['preselection'];
    }

    /**
     * Sets preselection
     *
     * @param \Optile\Model\RecurringPreselection $preselection **Experimental!** this option is not officially supported yet. It allows to differentiate between direct and deferred `CHARGE`.
     *
     * @return $this
     */
    public function setPreselection($preselection)
    {
        $this->container['preselection'] = $preselection;

        return $this;
    }

    /**
     * Gets checkboxes
     *
     * @return map[string,bool]
     */
    public function getCheckboxes()
    {
        return $this->container['checkboxes'];
    }

    /**
     * Sets checkboxes
     *
     * @param map[string,bool] $checkboxes Map of selected checkboxes. Name reflects the checkbox distinguish name, value reflects its state - `true` for checked, `false` for unchecked.  Note: this property has no processing implications at the moment.
     *
     * @return $this
     */
    public function setCheckboxes($checkboxes)
    {
        $this->container['checkboxes'] = $checkboxes;

        return $this;
    }

    /**
     * Gets final_operation
     *
     * @return bool
     */
    public function getFinalOperation()
    {
        return $this->container['final_operation'];
    }

    /**
     * Sets final_operation
     *
     * @param bool $final_operation Indicates that this is a final operation of this kind: final capture, update or refund and no future actions are expected.
     *
     * @return $this
     */
    public function setFinalOperation($final_operation)
    {
        $this->container['final_operation'] = $final_operation;

        return $this;
    }

    /**
     * Gets provider_request
     *
     * @return \Optile\Model\ProviderParameters
     */
    public function getProviderRequest()
    {
        return $this->container['provider_request'];
    }

    /**
     * Sets provider_request
     *
     * @param \Optile\Model\ProviderParameters $provider_request Provider request parameters that should be passed to the target payment provider adapter to complete the operation.  Note: there are no express preset providers at the moment that would expect any provider specific data passed during payment operation.
     *
     * @return $this
     */
    public function setProviderRequest($provider_request)
    {
        $this->container['provider_request'] = $provider_request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


