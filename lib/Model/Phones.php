<?php
/**
 * Phones
 *
 * PHP version 5
 *
 * @category Class
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server Payment API
 *
 * RESTful API for payments via optile Open Payment Gateway (OPG) for server to server communication. Calls to this API require authorization.  ## Current version   * API service version: `1.1.289`   * API model version: `1.20.87`
 *
 * OpenAPI spec version: 1.1.289
 * Contact: support@optile.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Optile\Model;

use \ArrayAccess;
use \Optile\ObjectSerializer;

/**
 * Phones Class Doc Comment
 *
 * @category Class
 * @description Customers phone numbers. Important for payments with advanced risk management.
 * @package  Optile
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Phones implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Phones';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'home' => '\Optile\Model\PhoneNumber',
        'work' => '\Optile\Model\PhoneNumber',
        'mobile' => '\Optile\Model\PhoneNumber',
        'mobile_secondary' => '\Optile\Model\PhoneNumber',
        'company' => '\Optile\Model\PhoneNumber',
        'fax' => '\Optile\Model\PhoneNumber',
        'other' => '\Optile\Model\PhoneNumber'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'home' => null,
        'work' => null,
        'mobile' => null,
        'mobile_secondary' => null,
        'company' => null,
        'fax' => null,
        'other' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'home' => 'home',
        'work' => 'work',
        'mobile' => 'mobile',
        'mobile_secondary' => 'mobileSecondary',
        'company' => 'company',
        'fax' => 'fax',
        'other' => 'other'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'home' => 'setHome',
        'work' => 'setWork',
        'mobile' => 'setMobile',
        'mobile_secondary' => 'setMobileSecondary',
        'company' => 'setCompany',
        'fax' => 'setFax',
        'other' => 'setOther'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'home' => 'getHome',
        'work' => 'getWork',
        'mobile' => 'getMobile',
        'mobile_secondary' => 'getMobileSecondary',
        'company' => 'getCompany',
        'fax' => 'getFax',
        'other' => 'getOther'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['home'] = isset($data['home']) ? $data['home'] : null;
        $this->container['work'] = isset($data['work']) ? $data['work'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['mobile_secondary'] = isset($data['mobile_secondary']) ? $data['mobile_secondary'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['other'] = isset($data['other']) ? $data['other'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets home
     *
     * @return \Optile\Model\PhoneNumber
     */
    public function getHome()
    {
        return $this->container['home'];
    }

    /**
     * Sets home
     *
     * @param \Optile\Model\PhoneNumber $home Where the customer is reachable when he/she is at home.
     *
     * @return $this
     */
    public function setHome($home)
    {
        $this->container['home'] = $home;

        return $this;
    }

    /**
     * Gets work
     *
     * @return \Optile\Model\PhoneNumber
     */
    public function getWork()
    {
        return $this->container['work'];
    }

    /**
     * Sets work
     *
     * @param \Optile\Model\PhoneNumber $work Where the customer is reachable when he/she is at work.
     *
     * @return $this
     */
    public function setWork($work)
    {
        $this->container['work'] = $work;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return \Optile\Model\PhoneNumber
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param \Optile\Model\PhoneNumber $mobile Mobile phone of the customer.
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets mobile_secondary
     *
     * @return \Optile\Model\PhoneNumber
     */
    public function getMobileSecondary()
    {
        return $this->container['mobile_secondary'];
    }

    /**
     * Sets mobile_secondary
     *
     * @param \Optile\Model\PhoneNumber $mobile_secondary Second mobile phone of the customer (e.g. from his/her work).
     *
     * @return $this
     */
    public function setMobileSecondary($mobile_secondary)
    {
        $this->container['mobile_secondary'] = $mobile_secondary;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Optile\Model\PhoneNumber
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Optile\Model\PhoneNumber $company The general phone number of the customer's company. Not to be confused with `work` number.
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return \Optile\Model\PhoneNumber
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param \Optile\Model\PhoneNumber $fax A facsimile number (fax number) that can be used to reach the customer.
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets other
     *
     * @return \Optile\Model\PhoneNumber
     */
    public function getOther()
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     *
     * @param \Optile\Model\PhoneNumber $other Any customer's number that does not match any type from above, e.g. pager number.
     *
     * @return $this
     */
    public function setOther($other)
    {
        $this->container['other'] = $other;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


